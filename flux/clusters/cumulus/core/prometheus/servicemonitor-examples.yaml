# Example ServiceMonitors for automatic scraping
# The Prometheus Operator will automatically discover these and configure scraping

# Monitor Nextcloud metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: nextcloud-metrics
  namespace: prometheus
  labels:
    app: nextcloud
spec:
  selector:
    matchLabels:
      app: nextcloud
  namespaceSelector:
    matchNames:
    - nextcloud
  endpoints:
  - port: http
    path: /ocs/v2.php/apps/serverinfo/api/v1/info
    interval: 30s
    basicAuth:
      username:
        name: nextcloud-monitoring
        key: username
      password:
        name: nextcloud-monitoring
        key: password
---
# Monitor Mattermost metrics  
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mattermost-metrics
  namespace: prometheus
  labels:
    app: mattermost
spec:
  selector:
    matchLabels:
      app: mattermost
  namespaceSelector:
    matchNames:
    - mattermost
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
---
# Monitor Sentry metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: sentry-metrics
  namespace: prometheus
  labels:
    app: sentry
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: sentry
  namespaceSelector:
    matchNames:
    - sentry
  endpoints:
  - port: http
    path: /_health/
    interval: 30s
---
# Monitor Redis clusters
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-metrics
  namespace: prometheus
  labels:
    app: redis
spec:
  selector:
    matchLabels:
      app: redis
  namespaceSelector:
    any: true
  endpoints:
  - port: redis
    interval: 30s
---
# Monitor PostgreSQL clusters
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: postgresql-metrics
  namespace: prometheus
  labels:
    app: postgresql
spec:
  selector:
    matchLabels:
      cnpg.io/cluster: ""
  namespaceSelector:
    any: true
  endpoints:
  - port: metrics
    interval: 30s