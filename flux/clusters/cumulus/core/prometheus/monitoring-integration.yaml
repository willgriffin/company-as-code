apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-integration-guide
  namespace: prometheus
data:
  guide: |
    Prometheus Operator Integration Guide
    ====================================
    
    The Prometheus Operator is already included in kube-prometheus-stack and provides
    powerful CRDs for easy monitoring integration:
    
    ## Key CRDs Available:
    
    ### 1. ServiceMonitor
    Automatically discovers services and configures scraping:
    ```yaml
    apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      name: my-app-metrics
      namespace: prometheus
    spec:
      selector:
        matchLabels:
          app: my-app
      endpoints:
      - port: metrics
        path: /metrics
        interval: 30s
    ```
    
    ### 2. PrometheusRule
    Defines alerting and recording rules:
    ```yaml
    apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    metadata:
      name: my-app-alerts
      namespace: prometheus
    spec:
      groups:
      - name: my-app.rules
        rules:
        - alert: MyAppDown
          expr: up{job="my-app"} == 0
          for: 5m
    ```
    
    ### 3. PodMonitor
    Monitors pods directly without services:
    ```yaml
    apiVersion: monitoring.coreos.com/v1
    kind: PodMonitor
    metadata:
      name: my-app-pods
      namespace: prometheus
    spec:
      selector:
        matchLabels:
          app: my-app
      podMetricsEndpoints:
      - port: metrics
    ```
    
    ## Integration Steps for New Applications:
    
    1. **Expose Metrics**: Add a /metrics endpoint to your application
    2. **Create ServiceMonitor**: Define how Prometheus should scrape
    3. **Add PrometheusRule**: Set up alerts for your application
    4. **Update Grafana**: Import or create dashboards
    
    ## Automatic Discovery:
    The Prometheus Operator automatically:
    - Discovers new ServiceMonitors and PodMonitors
    - Reloads Prometheus configuration
    - Applies new alerting rules
    - No manual Prometheus config needed!
    
    ## For Knative Applications:
    ServiceMonitors work with Knative services too:
    ```yaml
    apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      name: knative-app-metrics
      namespace: prometheus
    spec:
      selector:
        matchLabels:
          serving.knative.dev/service: my-knative-app
      endpoints:
      - port: http
        path: /metrics
    ```
    
    This makes monitoring integration as easy as applying a YAML file!