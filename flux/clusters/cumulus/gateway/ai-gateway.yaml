# AI Gateway configuration for LLM proxy and token tracking

---
# AI Gateway route for multiple LLM providers
apiVersion: gateway.networking.k8s.io/v1beta1
kind: HTTPRoute
metadata:
  name: ai-gateway
  namespace: kong-system
  annotations:
    konghq.com/plugins: prometheus-metrics,basic-rate-limit
spec:
  parentRefs:
  - name: kong-gateway
    namespace: kong-system
  hostnames:
  - ai.{{ (datasource "config").domain }}
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /v1/
    backendRefs:
    - name: ai-budget-service  
      port: 8080

---
# Note: Advanced AI proxy plugins commented out for DB-less mode
# Can be re-enabled once Kong AI plugins support DB-less mode fully

# TODO: AI Proxy plugins for DB-less mode
# Advanced AI proxy features will be added in Phase 3
# Current focus: Core Kong Gateway functionality

---
# AI Budget Service deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-budget-service
  namespace: kong-system
  labels:
    app: ai-budget-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ai-budget-service
  template:
    metadata:
      labels:
        app: ai-budget-service
    spec:
      containers:
      - name: budget-service
        image: node:18-alpine
        command: ["/bin/sh"]
        args:
        - -c
        - |
          cat > /app/package.json << 'EOF'
          {
            "name": "ai-budget-service",
            "version": "1.0.0",
            "dependencies": {
              "express": "^4.18.2",
              "prometheus-client": "^14.2.0"
            }
          }
          EOF
          
          cat > /app/server.js << 'EOF'
          const express = require('express');
          const client = require('prom-client');
          
          const app = express();
          app.use(express.json());
          
          // Metrics
          const register = new client.Registry();
          const budgetUsage = new client.Gauge({
            name: 'ai_budget_usage_usd',
            help: 'AI budget usage in USD',
            labelNames: ['consumer_id', 'period'],
            registers: [register]
          });
          
          const tokenCount = new client.Counter({
            name: 'ai_tokens_total',
            help: 'Total AI tokens consumed',
            labelNames: ['consumer_id', 'model', 'provider', 'type'],
            registers: [register]
          });
          
          // Budget tracking storage (in production, use Redis/DB)
          const budgets = new Map();
          
          // Webhook endpoint for budget alerts
          app.post('/webhook', (req, res) => {
            const { consumer_id, cost, tokens, model, provider } = req.body;
            
            console.log(`Budget alert: Consumer ${consumer_id}, Cost: $${cost}, Tokens: ${tokens}, Model: ${model}`);
            
            // Update metrics
            budgetUsage.set({ consumer_id, period: 'daily' }, cost);
            tokenCount.inc({ consumer_id, model, provider, type: 'input' }, tokens.input || 0);
            tokenCount.inc({ consumer_id, model, provider, type: 'output' }, tokens.output || 0);
            
            res.json({ status: 'ok' });
          });
          
          // Metrics endpoint
          app.get('/metrics', async (req, res) => {
            res.set('Content-Type', register.contentType);
            res.end(await register.metrics());
          });
          
          // Health check
          app.get('/health', (req, res) => {
            res.json({ status: 'healthy' });
          });
          
          app.listen(8080, () => {
            console.log('AI Budget Service listening on port 8080');
          });
          EOF
          
          cd /app && npm install && node server.js
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10

---
# Service for AI Budget Service
apiVersion: v1
kind: Service
metadata:
  name: ai-budget-service
  namespace: kong-system
  labels:
    app: ai-budget-service
spec:
  selector:
    app: ai-budget-service
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP