apiVersion: apps/v1
kind: Deployment
metadata:
  name: postal-queue-worker
  namespace: postal
  labels:
    app: postal-queue-worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: postal-queue-worker
  template:
    metadata:
      labels:
        app: postal-queue-worker
      annotations:
        instrumentation.opentelemetry.io/inject-nodejs: "opentelemetry-operator-system/default-instrumentation"
    spec:
      containers:
      - name: queue-worker
        image: node:18-alpine
        command: ["/bin/sh"]
        args:
        - -c
        - |
          cat > /app/package.json << 'EOF'
          {
            "name": "postal-queue-worker",
            "version": "1.0.0",
            "dependencies": {
              "amqplib": "^0.10.3",
              "nodemailer": "^6.9.8"
            }
          }
          EOF
          
          cat > /app/worker.js << 'EOF'
          const amqp = require('amqplib');
          const { createTransport } = require('nodemailer');
          
          const RABBITMQ_URL = process.env.RABBITMQ_URL || 'amqp://localhost';
          const MAILU_HOST = process.env.MAILU_HOST || 'mailu-front.mailu.svc.cluster.local';
          const MAILU_PORT = process.env.MAILU_PORT || '25';
          const QUEUE_NAME = process.env.QUEUE_NAME || 'mail.processing';
          const EXCHANGE_NAME = process.env.EXCHANGE_NAME || 'mail.exchange';
          
          // Create SMTP transport for forwarding to Mailu
          const transport = createTransport({
            host: MAILU_HOST,
            port: parseInt(MAILU_PORT),
            secure: false,
            ignoreTLS: true,
            connectionTimeout: 60000,
            greetingTimeout: 30000,
            socketTimeout: 60000
          });
          
          async function processMessage(message) {
            try {
              const mailData = JSON.parse(message.content.toString());
              console.log(`Processing mail from ${mailData.from} to ${mailData.to}`);
              
              const mailOptions = {
                from: mailData.from,
                to: mailData.to,
                subject: mailData.subject,
                text: mailData.plain_body,
                html: mailData.html_body,
                headers: {
                  'X-Original-To': mailData.to,
                  'X-Forwarded-From': 'postal-server',
                  'X-Postal-Message-ID': mailData.id,
                  'X-Queue-Processed': new Date().toISOString()
                }
              };
              
              await transport.sendMail(mailOptions);
              console.log(`Mail forwarded successfully: ${mailData.id}`);
              return true;
            } catch (error) {
              console.error('Error processing message:', error);
              throw error;
            }
          }
          
          async function startWorker() {
            try {
              console.log('Connecting to RabbitMQ...');
              const connection = await amqp.connect(RABBITMQ_URL);
              const channel = await connection.createChannel();
              
              console.log(`Setting up queue: ${QUEUE_NAME}`);
              await channel.assertQueue(QUEUE_NAME, {
                durable: true,
                arguments: {
                  'x-queue-type': 'quorum'
                }
              });
              
              await channel.assertExchange(EXCHANGE_NAME, 'direct', { durable: true });
              await channel.bindQueue(QUEUE_NAME, EXCHANGE_NAME, 'mail.inbound');
              
              // Set prefetch to process one message at a time
              await channel.prefetch(1);
              
              console.log('Worker ready, waiting for messages...');
              
              channel.consume(QUEUE_NAME, async (msg) => {
                if (msg) {
                  try {
                    await processMessage(msg);
                    channel.ack(msg);
                  } catch (error) {
                    console.error('Failed to process message:', error);
                    // Reject and requeue (with backoff handled by RabbitMQ)
                    channel.nack(msg, false, true);
                  }
                }
              });
              
              // Handle graceful shutdown
              process.on('SIGINT', async () => {
                console.log('Shutting down worker...');
                await channel.close();
                await connection.close();
                process.exit(0);
              });
              
            } catch (error) {
              console.error('Failed to start worker:', error);
              setTimeout(startWorker, 5000); // Retry after 5 seconds
            }
          }
          
          startWorker();
          EOF
          
          cd /app && npm install && node worker.js
        env:
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: postal-rabbitmq-secret
              key: connection-string
        - name: MAILU_HOST
          value: "mailu-front.mailu.svc.cluster.local"
        - name: MAILU_PORT
          value: "25"
        - name: QUEUE_NAME
          value: "mail.processing"
        - name: EXCHANGE_NAME
          value: "mail.exchange"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "ps aux | grep '[n]ode worker.js' > /dev/null"
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "ps aux | grep '[n]ode worker.js' > /dev/null"
          initialDelaySeconds: 10
          periodSeconds: 10