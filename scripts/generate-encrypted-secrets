#!/usr/bin/env bash
set -euo pipefail

# Script to generate encrypted secrets from templates using SOPS
# This processes secret templates and encrypts them for Flux to decrypt

# Find repository root
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || echo ".")
cd "$REPO_ROOT"

# Check if .envrc.secrets exists
if [ ! -f ".envrc.secrets" ]; then
    echo "Error: .envrc.secrets file not found in repository root" >&2
    exit 1
fi

# Check for required tools
for tool in sops age; do
    if ! command -v "$tool" &> /dev/null; then
        echo "Error: $tool is not installed. Please install it first." >&2
        exit 1
    fi
done

# Source the secrets file
# shellcheck disable=SC1091
source .envrc.secrets

# Set up age key for SOPS
# SOPS expects the age key in a file, so create a temporary one
export SOPS_AGE_KEY_FILE=$(mktemp)
echo "$SOPS_AGE_PRIVATE_KEY" > "$SOPS_AGE_KEY_FILE"

# Clean up function
cleanup() {
    rm -f "$SOPS_AGE_KEY_FILE"
}
trap cleanup EXIT

# Function to render Go templates using sed
render_template() {
    local input="$1"
    local output="$2"
    
    # Process the template and replace all variables
    cp "$input" "$output"
    
    # Find all variables in the template
    local vars=$(grep -oE '\{\{[[:space:]]*\.Env\.([A-Z_]+)[[:space:]]*\}\}' "$output" | sed -E 's/\{\{[[:space:]]*\.Env\.([A-Z_]+)[[:space:]]*\}\}/\1/' | sort -u)
    
    # Replace each variable
    for var_name in $vars; do
        var_value="${!var_name:-}"
        if [ -z "$var_value" ]; then
            echo "  Warning: Variable $var_name is not set" >&2
        else
            # Escape special characters for sed
            escaped_value=$(printf '%s\n' "$var_value" | sed 's:[\\/&]:\\&:g; s/|/\\|/g')
            # Use | as delimiter since / might be in the value
            sed -i "s|{{ *\.Env\.$var_name *}}|$escaped_value|g" "$output"
        fi
    done
}

# Function to process a single application's secrets
process_app_secrets() {
    local app="$1"
    local template_file="flux/clusters/cumulus/$app/secrets-template.yaml"
    local output_file="flux/clusters/cumulus/$app/secrets.enc.yaml"
    
    if [ ! -f "$template_file" ]; then
        echo "  ⚠️  No template found for $app"
        return 1
    fi
    
    echo "Processing $app secrets..."
    
    # Render template to a file that matches .sops.yaml rules
    # First, create an unencrypted version with a name that matches the rules
    local temp_file="flux/clusters/cumulus/$app/secrets.yaml"
    render_template "$template_file" "$temp_file"
    
    # Encrypt with SOPS
    sops --encrypt --input-type yaml --output-type yaml \
        "$temp_file" > "$output_file"
    
    # Clean up temp file
    rm -f "$temp_file"
    
    echo "  ✓ Generated $output_file"
}

echo "Generating encrypted secrets from templates..."
echo

# Function to process core service secrets
process_core_secrets() {
    local service="$1"
    local template_file="flux/clusters/cumulus/core/$service/secrets-template.yaml"
    local output_file="flux/clusters/cumulus/core/$service/secrets.enc.yaml"
    
    if [ ! -f "$template_file" ]; then
        echo "  ⚠️  No template found for core service $service"
        return 1
    fi
    
    echo "Processing $service secrets..."
    
    # Render template to a file that matches .sops.yaml rules
    local temp_file="flux/clusters/cumulus/core/$service/secrets.yaml"
    render_template "$template_file" "$temp_file"
    
    # Encrypt with SOPS
    sops --encrypt --input-type yaml --output-type yaml \
        "$temp_file" > "$output_file"
    
    # Clean up temp file
    rm -f "$temp_file"
    
    echo "  ✓ Generated $output_file"
}

# Process all applications and core services with secrets
apps=("keycloak" "mattermost" "nextcloud" "mailu")
core_services=("external-dns")
success_count=0
fail_count=0

# Process applications
for app in "${apps[@]}"; do
    if process_app_secrets "$app"; then
        success_count=$((success_count + 1))
    else
        fail_count=$((fail_count + 1))
    fi
done

# Process core services
for service in "${core_services[@]}"; do
    if process_core_secrets "$service"; then
        success_count=$((success_count + 1))
    else
        fail_count=$((fail_count + 1))
    fi
done

echo
echo "Summary:"
echo "  Successful: $success_count"
echo "  Failed: $fail_count"

if [ $fail_count -gt 0 ]; then
    echo
    echo "⚠️  Some secrets failed to generate. Check the output above for details."
    exit 1
else
    echo
    echo "✓ All secrets generated successfully!"
    echo
    echo "Next steps:"
    echo "1. Review the generated .enc.yaml files"
    echo "2. Commit and push the encrypted secrets:"
    echo "   git add flux/clusters/cumulus/*/secrets.enc.yaml flux/clusters/cumulus/core/*/secrets.enc.yaml"
    echo "   git commit -m 'feat: add encrypted secrets for applications and core services'"
    echo "   git push"
fi