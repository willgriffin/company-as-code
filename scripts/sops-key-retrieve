#!/usr/bin/env bash
set -euo pipefail

# Script to retrieve SOPS age key information from GitHub secrets
# This helps when you need to manage a cluster locally that was created via workflows

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check if gh CLI is installed
if ! command -v gh &> /dev/null; then
    print_error "gh CLI is not installed. Please install it first:"
    echo "  https://cli.github.com/"
    exit 1
fi

# Check if authenticated with GitHub
if ! gh auth status &> /dev/null; then
    print_error "Not authenticated with GitHub. Please run 'gh auth login' first."
    exit 1
fi

# Find repository root
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || echo ".")
cd "$REPO_ROOT"

# Parse config.yaml for repository info
if [[ -f "config.yaml" ]] && command -v yq &> /dev/null; then
    GITHUB_OWNER=$(yq '.repository.owner' config.yaml)
    GITHUB_REPOSITORY=$(yq '.repository.name' config.yaml)
    REPO="$GITHUB_OWNER/$GITHUB_REPOSITORY"
else
    # Fallback to gh repo view
    REPO=$(gh repo view --json nameWithOwner -q .nameWithOwner)
fi

if [ -z "$REPO" ]; then
    print_error "Could not determine repository. Make sure you're in a git repository."
    exit 1
fi

print_info "Checking SOPS configuration in repository: $REPO"
echo

# Check for SOPS public key
print_info "Checking for SOPS_AGE_PUBLIC_KEY in GitHub secrets..."
SOPS_PUBLIC_KEY_EXISTS=$(gh api repos/$REPO/actions/secrets/SOPS_AGE_PUBLIC_KEY 2>/dev/null | jq -r '.name' 2>/dev/null || echo "")

if [[ "$SOPS_PUBLIC_KEY_EXISTS" == "SOPS_AGE_PUBLIC_KEY" ]]; then
    print_success "SOPS_AGE_PUBLIC_KEY exists in GitHub secrets"
    
    # Try to get the public key from a recent workflow run
    print_info "Searching recent workflow runs for SOPS public key..."
    
    # Get recent workflow runs
    WORKFLOW_RUNS=$(gh api repos/$REPO/actions/runs --jq '.workflow_runs[] | select(.conclusion == "success") | .id' | head -5)
    
    FOUND_KEY=false
    for run_id in $WORKFLOW_RUNS; do
        # Check workflow run logs for SOPS public key
        LOGS=$(gh run view $run_id --log 2>/dev/null || echo "")
        PUBLIC_KEY=$(echo "$LOGS" | grep -E "age1[a-z0-9]{58}" | head -1 | grep -oE "age1[a-z0-9]{58}" || echo "")
        
        if [[ -n "$PUBLIC_KEY" ]]; then
            print_success "Found SOPS public key in workflow run $run_id:"
            echo "  Public key: $PUBLIC_KEY"
            FOUND_KEY=true
            break
        fi
    done
    
    if [[ "$FOUND_KEY" == "false" ]]; then
        print_warning "Could not find SOPS public key in recent workflow logs"
        print_info "The key exists but needs to be retrieved from the workflow that created it"
    fi
    
    echo
    print_warning "Note: The SOPS private key cannot be retrieved from GitHub for security reasons"
    print_info "To manage secrets locally, you need the private key that was generated when the cluster was created"
    echo
    print_info "Options:"
    echo "  1. If you saved the private key when the cluster was created, add it to your .envrc.secrets:"
    echo "     export SOPS_AGE_PRIVATE_KEY='AGE-SECRET-KEY...'"
    echo "  2. If you don't have the private key, you can still manage the cluster but won't be able to:"
    echo "     - Decrypt existing secrets"
    echo "     - Create new encrypted secrets with the same key"
    echo "  3. To fully reset SOPS (requires re-encrypting all secrets):"
    echo "     - Generate a new age key locally"
    echo "     - Update all encrypted files"
    echo "     - Update GitHub secrets"
else
    print_warning "No SOPS_AGE_PUBLIC_KEY found in GitHub secrets"
    print_info "This cluster may not have SOPS encryption configured yet"
fi

# Check for other workflow artifacts or outputs that might contain the key
print_info "Checking for workflow artifacts that might contain SOPS configuration..."

# List recent artifacts
ARTIFACTS=$(gh api repos/$REPO/actions/artifacts --jq '.artifacts[] | select(.name | contains("sops") or contains("age")) | {name: .name, id: .id, created_at: .created_at}' 2>/dev/null || echo "")

if [[ -n "$ARTIFACTS" ]]; then
    print_info "Found potentially relevant artifacts:"
    echo "$ARTIFACTS" | jq -r '. | "  - \(.name) (created: \(.created_at))"'
    echo
    print_info "Note: Artifacts are typically only available for 90 days after creation"
fi

# Create a helper script for local SOPS operations
cat > sops-local-setup.sh << 'EOF'
#!/usr/bin/env bash
# Helper script for local SOPS operations

# Check if SOPS_AGE_PRIVATE_KEY is set
if [[ -z "${SOPS_AGE_PRIVATE_KEY:-}" ]]; then
    echo "❌ SOPS_AGE_PRIVATE_KEY is not set"
    echo "   Add it to your .envrc.secrets file:"
    echo "   export SOPS_AGE_PRIVATE_KEY='AGE-SECRET-KEY...'"
    exit 1
fi

# Extract public key
if command -v age-keygen &> /dev/null; then
    export SOPS_AGE_PUBLIC_KEY=$(echo "$SOPS_AGE_PRIVATE_KEY" | age-keygen -y)
    echo "✅ SOPS configuration:"
    echo "   Public key: $SOPS_AGE_PUBLIC_KEY"
    echo "   Private key is set"
else
    echo "⚠️  age-keygen not found, install age to extract public key"
fi

# Test SOPS functionality
if command -v sops &> /dev/null; then
    echo ""
    echo "Testing SOPS encryption/decryption..."
    TEMP_FILE=$(mktemp)
    echo "test: value" > "$TEMP_FILE"
    
    if sops -e "$TEMP_FILE" > /dev/null 2>&1; then
        echo "✅ SOPS encryption works"
    else
        echo "❌ SOPS encryption failed"
    fi
    
    rm -f "$TEMP_FILE"
fi
EOF

chmod +x sops-local-setup.sh

print_success "Created sops-local-setup.sh helper script"
print_info "Run ./sops-local-setup.sh to test your local SOPS configuration"