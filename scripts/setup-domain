#!/usr/bin/env bash
set -euo pipefail

# Domain Setup Script for Initialized GitOps Repository
# Run this after creating a repository from the template

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[SETUP]${NC} $*"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

error() {
    echo -e "${RED}[ERROR]${NC} $*"
}

usage() {
    cat << EOF
Usage: $0 <domain>

Configure your GitOps repository with your domain name.

This script replaces all instances of "example.com" with your domain
in the Kubernetes YAML files.

Examples:
    $0 mycompany.com
    $0 staging.mycompany.com

EOF
}

validate_domain() {
    local domain="$1"
    
    # Basic domain validation
    if [[ ! $domain =~ ^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$ ]]; then
        error "Invalid domain format: $domain"
        echo "Domain must be a valid DNS name (e.g., example.com, app.example.com)"
        exit 1
    fi
    
    success "Domain format is valid: $domain"
}

check_template_initialized() {
    if [ ! -f "$PROJECT_ROOT/.template-initialized" ]; then
        error "This script is for repositories created from the GitOps template."
        echo "If you're working on the template itself, this script is not needed."
        exit 1
    fi
    
    success "Repository is properly initialized from template"
}

update_domain_in_files() {
    local domain="$1"
    
    log "Updating domain from 'example.com' to '$domain' in YAML files..."
    
    # Find and update all YAML files that contain example.com
    local files_updated=0
    
    while IFS= read -r -d '' file; do
        if grep -q "example\.com" "$file"; then
            log "Updating: $file"
            sed -i "s/example\.com/$domain/g" "$file"
            ((files_updated++))
        fi
    done < <(find "$PROJECT_ROOT/flux" -name "*.yaml" -type f -print0)
    
    if [ $files_updated -eq 0 ]; then
        echo "No files found with 'example.com' - domain may already be configured"
    else
        success "Updated domain in $files_updated file(s)"
    fi
}

validate_updates() {
    local domain="$1"
    
    log "Validating domain updates..."
    
    # Check if any example.com references remain
    local remaining_files
    remaining_files=$(find "$PROJECT_ROOT/flux" -name "*.yaml" -type f -exec grep -l "example\.com" {} + 2>/dev/null || true)
    
    if [ -n "$remaining_files" ]; then
        error "Some files still contain 'example.com':"
        echo "$remaining_files"
        echo "You may need to review these files manually."
        return 1
    fi
    
    # Check if domain appears in files
    local updated_files
    updated_files=$(find "$PROJECT_ROOT/flux" -name "*.yaml" -type f -exec grep -l "$domain" {} + 2>/dev/null || true)
    
    if [ -n "$updated_files" ]; then
        success "Domain '$domain' found in updated files"
        return 0
    else
        error "Domain '$domain' not found in any files - update may have failed"
        return 1
    fi
}

show_next_steps() {
    local domain="$1"
    
    cat << EOF

ðŸŽ‰ Domain setup complete!

Your GitOps repository is now configured for: $domain

## Next steps:

1. **Set up GitHub Secrets** in repository settings:
   - DIGITALOCEAN_TOKEN (DigitalOcean API token)
   - TF_VAR_region (e.g., "nyc3", "sfo3", "ams3")
   - TF_VAR_cluster_name (e.g., "production", "staging")

2. **Generate secrets**:
   ./scripts/generate-secrets

3. **Commit your changes**:
   git add .
   git commit -m "Configure domain: $domain"
   git push

4. **Deploy infrastructure**:
   Pushing to main branch will automatically deploy your cluster!

## Your services will be available at:
- Keycloak (Auth): https://auth.$domain
- Grafana (Monitoring): https://grafana.$domain
- Nextcloud (Storage): https://cloud.$domain
- Mattermost (Chat): https://chat.$domain
- AI Gateway: https://ai.$domain

EOF
}

main() {
    local domain=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help|-h)
                usage
                exit 0
                ;;
            *)
                if [ -z "$domain" ]; then
                    domain="$1"
                else
                    error "Too many arguments. Expected: setup-domain <domain>"
                    usage
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    if [ -z "$domain" ]; then
        error "Domain is required"
        usage
        exit 1
    fi
    
    log "Setting up GitOps repository for domain: $domain"
    
    check_template_initialized
    validate_domain "$domain"
    update_domain_in_files "$domain"
    
    if validate_updates "$domain"; then
        show_next_steps "$domain"
    else
        error "Domain setup encountered issues. Please review manually."
        exit 1
    fi
}

main "$@"