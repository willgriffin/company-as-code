#!/usr/bin/env bash
set -euo pipefail

# Script to extract existing secrets from encrypted SOPS files in the repository
# This helps when recreating a cluster and wanting to reuse existing secrets

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check if SOPS is installed
if ! command -v sops &> /dev/null; then
    print_error "sops is not installed. Please install it first."
    exit 1
fi

# Check if age private key is available
if [ -z "${SOPS_AGE_PRIVATE_KEY:-}" ]; then
    print_error "SOPS_AGE_PRIVATE_KEY environment variable is not set"
    print_info "Please set it to decrypt the existing secrets"
    exit 1
fi

# Find repository root
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || echo ".")
cd "$REPO_ROOT"

# Output file for extracted secrets
OUTPUT_FILE=".envrc.secrets.extracted"

print_info "Extracting secrets from encrypted files in the repository..."
echo

# Create header for output file
cat > "$OUTPUT_FILE" << 'EOF'
#!/usr/bin/env bash
# Extracted secrets from existing encrypted files
# Generated on: $(date)
# 
# These secrets were extracted from the encrypted SOPS files in the repository
# Review and merge with your .envrc.secrets file as needed

EOF

# Counter for extracted secrets
extracted_count=0

# Function to extract value from SOPS file
extract_secret() {
    local file="$1"
    local path="$2"
    local var_name="$3"
    
    if [ -f "$file" ]; then
        local value=$(sops -d "$file" 2>/dev/null | yq "$path" 2>/dev/null || echo "")
        if [ -n "$value" ] && [ "$value" != "null" ]; then
            echo "export $var_name=\"$value\"" >> "$OUTPUT_FILE"
            print_success "Extracted $var_name from $file"
            extracted_count=$((extracted_count + 1))
            return 0
        fi
    fi
    return 1
}

# Extract DigitalOcean credentials from external-dns
print_info "Extracting DigitalOcean credentials..."
extract_secret "flux/clusters/cumulus/core/external-dns/secrets.enc.yaml" \
    '.stringData.DO_API_TOKEN' \
    'DIGITALOCEAN_TOKEN'

# Extract Keycloak secrets
print_info "Extracting Keycloak secrets..."
extract_secret "flux/clusters/cumulus/services/keycloak/secrets.enc.yaml" \
    '.stringData.password' \
    'KEYCLOAK_DB_PASSWORD'

extract_secret "flux/clusters/cumulus/services/keycloak/secrets.enc.yaml" \
    '.stringData.KEYCLOAK_ADMIN_PASSWORD' \
    'KEYCLOAK_ADMIN_PASSWORD'

# Extract Mattermost secrets
print_info "Extracting Mattermost secrets..."
extract_secret "flux/clusters/cumulus/applications/mattermost/secrets.enc.yaml" \
    '.stringData.password' \
    'MATTERMOST_DB_PASSWORD'

extract_secret "flux/clusters/cumulus/applications/mattermost/secrets.enc.yaml" \
    '.stringData.MM_GITLABSETTINGS_ID' \
    'MATTERMOST_OAUTH_CLIENT_ID'

extract_secret "flux/clusters/cumulus/applications/mattermost/secrets.enc.yaml" \
    '.stringData.MM_GITLABSETTINGS_SECRET' \
    'MATTERMOST_OAUTH_CLIENT_SECRET'

# Extract Nextcloud secrets
print_info "Extracting Nextcloud secrets..."
extract_secret "flux/clusters/cumulus/applications/nextcloud/secrets.enc.yaml" \
    '.data."nextcloud-db-password"' \
    'NEXTCLOUD_DB_PASSWORD' || \
extract_secret "flux/clusters/cumulus/applications/nextcloud/secrets.enc.yaml" \
    '.stringData."nextcloud-db-password"' \
    'NEXTCLOUD_DB_PASSWORD'

extract_secret "flux/clusters/cumulus/applications/nextcloud/secrets.enc.yaml" \
    '.stringData.oidc_client_id' \
    'NEXTCLOUD_OIDC_CLIENT_ID'

extract_secret "flux/clusters/cumulus/applications/nextcloud/secrets.enc.yaml" \
    '.stringData.oidc_client_secret' \
    'NEXTCLOUD_OIDC_CLIENT_SECRET'

extract_secret "flux/clusters/cumulus/applications/nextcloud/secrets.enc.yaml" \
    '.stringData.objectstore_s3_key' \
    'NEXTCLOUD_SPACES_ACCESS_KEY'

extract_secret "flux/clusters/cumulus/applications/nextcloud/secrets.enc.yaml" \
    '.stringData.objectstore_s3_secret' \
    'NEXTCLOUD_SPACES_SECRET_KEY'

# Extract Mailu secrets
print_info "Extracting Mailu secrets..."
extract_secret "flux/clusters/cumulus/applications/mailu/secrets.enc.yaml" \
    '.stringData.OAUTH2_CLIENT_ID' \
    'MAILU_OAUTH2_CLIENT_ID'

extract_secret "flux/clusters/cumulus/applications/mailu/secrets.enc.yaml" \
    '.stringData.OAUTH2_CLIENT_SECRET' \
    'MAILU_OAUTH2_CLIENT_SECRET'

extract_secret "flux/clusters/cumulus/applications/mailu/secrets.enc.yaml" \
    '.stringData.OAUTH2_COOKIE_SECRET' \
    'MAILU_OAUTH2_COOKIE_SECRET'

echo
print_info "Extraction complete!"
print_success "Extracted $extracted_count secrets to $OUTPUT_FILE"
echo

if [ $extracted_count -gt 0 ]; then
    print_info "Next steps:"
    echo "  1. Review the extracted secrets in $OUTPUT_FILE"
    echo "  2. Compare with your existing .envrc.secrets file"
    echo "  3. Copy any needed values to .envrc.secrets"
    echo "  4. Source .envrc.secrets to load the environment variables"
    echo
    print_warning "Note: Some secrets like GITHUB_TOKEN, SPACES credentials, and SOPS_AGE_PRIVATE_KEY"
    print_warning "cannot be extracted from the cluster secrets and must be provided separately."
else
    print_warning "No secrets were extracted. This might be because:"
    echo "  - The SOPS_AGE_PRIVATE_KEY is incorrect"
    echo "  - The encrypted files don't exist or have different structure"
    echo "  - The secrets were never populated in the first place"
fi