#!/usr/bin/env bash
set -euo pipefail

# Update GitHub repository secret with kubeconfig
# This script updates the KUBECONFIG secret using the gh CLI

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Check if gh CLI is installed
if ! command -v gh &> /dev/null; then
    echo "Error: GitHub CLI (gh) is not installed" >&2
    echo "Install it from: https://cli.github.com/" >&2
    exit 1
fi

# Check if authenticated
if ! gh auth status &> /dev/null; then
    echo "Error: Not authenticated with GitHub CLI" >&2
    echo "Run: gh auth login" >&2
    exit 1
fi

# Get the repository (supports both formats)
REPO=$(gh repo view --json nameWithOwner -q .nameWithOwner 2>/dev/null || echo "")
if [ -z "$REPO" ]; then
    echo "Error: Not in a git repository or unable to determine repository" >&2
    echo "Make sure you're in the repository directory" >&2
    exit 1
fi

echo "Updating KUBECONFIG secret for repository: $REPO" >&2

# Get kubeconfig from terraform
echo "Retrieving kubeconfig from Terraform..." >&2
KUBECONFIG_CONTENT=$("${SCRIPT_DIR}/kubeconfig-get") || {
    echo "Error: Failed to get kubeconfig" >&2
    exit 1
}

# Update the repository secret
echo "Updating KUBECONFIG secret..." >&2
echo "$KUBECONFIG_CONTENT" | gh secret set KUBECONFIG --repo="$REPO" || {
    echo "Error: Failed to update KUBECONFIG secret" >&2
    echo "Make sure you have admin permissions on the repository" >&2
    exit 1
}

echo "Successfully updated KUBECONFIG secret for $REPO" >&2
echo "" >&2
echo "This secret can be used in GitHub Actions workflows with:" >&2
echo "  \${{ secrets.KUBECONFIG }}" >&2