#!/usr/bin/env bash
set -euo pipefail

# Script to sync secrets from .envrc.secrets to GitHub repository secrets
# Uses the gh CLI tool to update secrets

# Check if gh CLI is installed
if ! command -v gh &> /dev/null; then
    echo "Error: gh CLI is not installed. Please install it first:" >&2
    echo "  https://cli.github.com/" >&2
    exit 1
fi

# Check if authenticated with GitHub
if ! gh auth status &> /dev/null; then
    echo "Error: Not authenticated with GitHub. Please run 'gh auth login' first." >&2
    exit 1
fi

# Find repository root
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || echo ".")
cd "$REPO_ROOT"

# Check if .envrc.secrets exists
if [ ! -f ".envrc.secrets" ]; then
    echo "Error: .envrc.secrets file not found in repository root" >&2
    exit 1
fi

# Get repository name (owner/repo format)
REPO=$(gh repo view --json nameWithOwner -q .nameWithOwner)
if [ -z "$REPO" ]; then
    echo "Error: Could not determine repository. Make sure you're in a git repository." >&2
    exit 1
fi

echo "Syncing secrets from .envrc.secrets to GitHub repository: $REPO"
echo

# Function to update a GitHub secret
update_secret() {
    local secret_name="$1"
    local secret_value="$2"
    
    if [ -z "$secret_value" ] || [[ "$secret_value" == "your_"* ]]; then
        echo "  ⚠️  Skipping $secret_name (placeholder value)"
        return 1
    fi
    
    if gh secret set "$secret_name" -b"$secret_value" -R "$REPO"; then
        echo "  ✓ Updated $secret_name"
        return 0
    else
        echo "  ✗ Failed to update $secret_name" >&2
        return 1
    fi
}

# Counter for statistics
updated=0
skipped=0
failed=0

# Source the .envrc.secrets file in a subshell to avoid polluting the environment
(
    # Source the file
    source .envrc.secrets
    
    # Map of local env vars to GitHub secret names
    declare -A secret_mapping
    secret_mapping["GITHUB_TOKEN"]="GITHUB_TOKEN"
    secret_mapping["SOPS_AGE_PRIVATE_KEY"]="SOPS_AGE_PRIVATE_KEY"
    secret_mapping["DIGITALOCEAN_TOKEN"]="DIGITALOCEAN_TOKEN"
    secret_mapping["SPACES_ACCESS_KEY_ID"]="SPACES_ACCESS_KEY_ID"
    secret_mapping["SPACES_SECRET_ACCESS_KEY"]="SPACES_SECRET_ACCESS_KEY"
    secret_mapping["KEYCLOAK_DB_PASSWORD"]="KEYCLOAK_PROD_DB_PASSWORD"
    secret_mapping["KEYCLOAK_ADMIN_PASSWORD"]="KEYCLOAK_PROD_ADMIN_PASSWORD"
    secret_mapping["MATTERMOST_DB_PASSWORD"]="MATTERMOST_PROD_DB_PASSWORD"
    secret_mapping["MATTERMOST_OAUTH_CLIENT_ID"]="MATTERMOST_PROD_OAUTH_CLIENT_ID"
    secret_mapping["MATTERMOST_OAUTH_CLIENT_SECRET"]="MATTERMOST_PROD_OAUTH_CLIENT_SECRET"
    secret_mapping["NEXTCLOUD_DB_PASSWORD"]="NEXTCLOUD_PROD_DB_PASSWORD"
    secret_mapping["NEXTCLOUD_OIDC_CLIENT_ID"]="NEXTCLOUD_PROD_OIDC_CLIENT_ID"
    secret_mapping["NEXTCLOUD_OIDC_CLIENT_SECRET"]="NEXTCLOUD_PROD_OIDC_CLIENT_SECRET"
    secret_mapping["NEXTCLOUD_SPACES_ACCESS_KEY"]="NEXTCLOUD_PROD_SPACES_ACCESS_KEY"
    secret_mapping["NEXTCLOUD_SPACES_SECRET_KEY"]="NEXTCLOUD_PROD_SPACES_SECRET_KEY"
    secret_mapping["MAILU_OAUTH2_CLIENT_ID"]="MAILU_PROD_OAUTH2_CLIENT_ID"
    secret_mapping["MAILU_OAUTH2_CLIENT_SECRET"]="MAILU_PROD_OAUTH2_CLIENT_SECRET"
    secret_mapping["MAILU_OAUTH2_COOKIE_SECRET"]="MAILU_PROD_OAUTH2_COOKIE_SECRET"
    secret_mapping["HAPPYVERTICAL_AWS_ACCESS_KEY_ID"]="HAPPYVERTICAL_AWS_ACCESS_KEY_ID"
    secret_mapping["HAPPYVERTICAL_AWS_SECRET_ACCESS_KEY"]="HAPPYVERTICAL_AWS_SECRET_ACCESS_KEY"
    
    # Process each secret
    for local_var in "${!secret_mapping[@]}"; do
        github_secret="${secret_mapping[$local_var]}"
        secret_value="${!local_var:-}"
        
        echo "Processing $github_secret..."
        if update_secret "$github_secret" "$secret_value"; then
            updated=$((updated + 1))
        elif [[ "$secret_value" == "your_"* ]] || [ -z "$secret_value" ]; then
            skipped=$((skipped + 1))
        else
            failed=$((failed + 1))
        fi
    done
    
    echo
    echo "Summary:"
    echo "  Updated: $updated"
    echo "  Skipped: $skipped"
    echo "  Failed:  $failed"
    
    if [ $failed -gt 0 ]; then
        exit 1
    fi
)

exit_code=$?

if [ $exit_code -eq 0 ]; then
    echo
    echo "✓ Secret sync completed successfully"
else
    echo
    echo "✗ Secret sync completed with errors" >&2
    exit $exit_code
fi