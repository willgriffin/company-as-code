#!/bin/bash
set -euo pipefail

# Update local kubeconfig file
# This script updates ~/.kube/have-[hostname].config with the cluster kubeconfig

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Get kubeconfig from terraform
echo "Retrieving kubeconfig from Terraform..." >&2
KUBECONFIG_CONTENT=$("${SCRIPT_DIR}/kubeconfig-get") || {
    echo "Error: Failed to get kubeconfig" >&2
    exit 1
}

# Extract cluster name from kubeconfig
CLUSTER_NAME=$(echo "$KUBECONFIG_CONTENT" | grep -oP '(?<=name: )do-[^-]+-[^-]+' | head -1 || echo "cumulus")

# Get hostname for the config file
HOSTNAME=$(hostname -s)

# Ensure ~/.kube directory exists
mkdir -p ~/.kube

# Define the target config file
CONFIG_FILE="${HOME}/.kube/have-${HOSTNAME}.config"

# Write kubeconfig to file
echo "Writing kubeconfig to $CONFIG_FILE..." >&2
echo "$KUBECONFIG_CONTENT" > "$CONFIG_FILE"

# Set appropriate permissions
chmod 600 "$CONFIG_FILE"

echo "Successfully updated kubeconfig at $CONFIG_FILE" >&2
echo "" >&2
echo "To use this kubeconfig:" >&2
echo "  export KUBECONFIG=$CONFIG_FILE" >&2
echo "  kubectl cluster-info" >&2
echo "" >&2
echo "Or add to your existing kubeconfig:" >&2
echo "  export KUBECONFIG=\${KUBECONFIG}:$CONFIG_FILE" >&2