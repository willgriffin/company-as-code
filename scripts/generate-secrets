#!/usr/bin/env bash
# Removed set -e due to SIGPIPE issues with /dev/urandom

# Script to generate secure random passwords and update .envrc.secrets

# Find repository root
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || echo ".")
cd "$REPO_ROOT"

# Check if .envrc.secrets exists
if [ ! -f ".envrc.secrets" ]; then
    echo "Error: .envrc.secrets file not found in repository root" >&2
    exit 1
fi

# Flag to show openssl warning only once
OPENSSL_WARNING_SHOWN=false

# Function to generate a secure password
# Uses alphanumeric + special chars but avoids problematic ones like $ ' " \ `
generate_password() {
    local length="${1:-32}"
    # Use /dev/urandom as a fallback if openssl is not available
    if command -v openssl &> /dev/null; then
        openssl rand -base64 48 | tr -d "=+/\n" | cut -c1-"$length"
    else
        if [ "$OPENSSL_WARNING_SHOWN" = "false" ]; then
            echo "Note: openssl not found, using /dev/urandom (alphanumeric only)" >&2
            OPENSSL_WARNING_SHOWN=true
        fi
        # Generate using /dev/urandom - alphanumeric only for safety
        # Use dd instead of head to avoid SIGPIPE
        tr -dc 'A-Za-z0-9' < /dev/urandom | dd bs=1 count="$length" 2>/dev/null
    fi
}

# Function to generate a client ID
generate_client_id() {
    local prefix="$1"
    local suffix=""
    if command -v openssl &> /dev/null; then
        suffix=$(openssl rand -hex 6)
    else
        # Generate 12 char hex-like string using /dev/urandom
        suffix=$(tr -dc 'a-f0-9' < /dev/urandom | dd bs=1 count=12 2>/dev/null)
    fi
    echo "${prefix}-${suffix}"
}

# Function to update a line in .envrc.secrets
update_secret() {
    local var_name="$1"
    local value="$2"
    
    # Use sed to update the line
    sed -i "s|^export ${var_name}=.*|export ${var_name}=\"${value}\"|" .envrc.secrets
    if [ $? -eq 0 ]; then
        echo "✓ Updated ${var_name}"
    else
        echo "✗ Failed to update ${var_name}" >&2
        return 1
    fi
}

echo "Generating secure secrets for .envrc.secrets..."
echo

# Generate passwords (32 chars)
KEYCLOAK_DB_PASS=$(generate_password 32)
KEYCLOAK_ADMIN_PASS=$(generate_password 32)
MATTERMOST_DB_PASS=$(generate_password 32)
NEXTCLOUD_DB_PASS=$(generate_password 32)

# Generate OAuth secrets (48-64 chars)
MATTERMOST_OAUTH_SECRET=$(generate_password 48)
NEXTCLOUD_OIDC_SECRET=$(generate_password 48)
MAILU_OAUTH2_SECRET=$(generate_password 48)
MAILU_COOKIE_SECRET=$(generate_password 64)

# Generate client IDs
MATTERMOST_CLIENT_ID=$(generate_client_id "mattermost-oauth")
NEXTCLOUD_CLIENT_ID=$(generate_client_id "nextcloud-oidc")
MAILU_CLIENT_ID=$(generate_client_id "mailu-oauth2")

# Update the secrets file
update_secret "KEYCLOAK_DB_PASSWORD" "$KEYCLOAK_DB_PASS"
update_secret "KEYCLOAK_ADMIN_PASSWORD" "$KEYCLOAK_ADMIN_PASS"
update_secret "MATTERMOST_DB_PASSWORD" "$MATTERMOST_DB_PASS"
update_secret "MATTERMOST_OAUTH_CLIENT_ID" "$MATTERMOST_CLIENT_ID"
update_secret "MATTERMOST_OAUTH_CLIENT_SECRET" "$MATTERMOST_OAUTH_SECRET"
update_secret "NEXTCLOUD_DB_PASSWORD" "$NEXTCLOUD_DB_PASS"
update_secret "NEXTCLOUD_OIDC_CLIENT_ID" "$NEXTCLOUD_CLIENT_ID"
update_secret "NEXTCLOUD_OIDC_CLIENT_SECRET" "$NEXTCLOUD_OIDC_SECRET"
update_secret "MAILU_OAUTH2_CLIENT_ID" "$MAILU_CLIENT_ID"
update_secret "MAILU_OAUTH2_CLIENT_SECRET" "$MAILU_OAUTH2_SECRET"
update_secret "MAILU_OAUTH2_COOKIE_SECRET" "$MAILU_COOKIE_SECRET"

echo
echo "✓ All secrets have been generated and updated"
echo
echo "Note: The following secrets were NOT updated (require manual configuration):"
echo "  - GITHUB_TOKEN (create at github.com/settings/tokens)"
echo "  - SOPS_AGE_PRIVATE_KEY (already set)"
echo "  - DIGITALOCEAN_TOKEN (create in DO control panel)"
echo "  - SPACES_ACCESS_KEY_ID (create in DO Spaces)"
echo "  - SPACES_SECRET_ACCESS_KEY (create in DO Spaces)"
echo "  - NEXTCLOUD_SPACES_* (create separate DO Spaces keys for Nextcloud)"
echo
echo "Run 'direnv allow' to reload the environment"