#!/usr/bin/env bash
set -euo pipefail

# Script to create the entire Kubernetes cluster and bootstrap GitOps
# This should be the only manual step needed to get everything running

# Find repository root
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || echo ".")
cd "$REPO_ROOT"

echo "=== Blueprint Cluster Creation ==="
echo

# Check if .envrc.secrets exists
if [ ! -f ".envrc.secrets" ]; then
    echo "‚ùå .envrc.secrets not found!"
    echo "Please run the initial setup first:"
    echo "  cp .envrc.secrets.example .envrc.secrets"
    echo "  # Edit .envrc.secrets with your tokens"
    echo "  ./scripts/initial-setup"
    exit 1
fi

# Load environment
echo "üìã Loading environment..."
# shellcheck disable=SC1091
source .envrc.secrets

# Validate required environment variables
required_vars=(
    "DIGITALOCEAN_TOKEN"
    "SPACES_ACCESS_KEY_ID" 
    "SPACES_SECRET_ACCESS_KEY"
    "SOPS_AGE_PRIVATE_KEY"
    "GITHUB_TOKEN"
)

for var in "${required_vars[@]}"; do
    if [ -z "${!var:-}" ]; then
        echo "‚ùå Required environment variable $var is not set"
        echo "Please check your .envrc.secrets file"
        exit 1
    fi
done

echo "‚úÖ Environment loaded successfully"
echo

# Step 1: Create Kubernetes cluster
echo "üöÄ Step 1: Creating Kubernetes cluster..."
cd terraform/digitalocean

terraform init -upgrade

# Try to import existing cluster if it exists but isn't in state
if ! terraform apply \
    -var="do_token=$DIGITALOCEAN_TOKEN" \
    -var="spaces_access_key=$SPACES_ACCESS_KEY_ID" \
    -var="spaces_secret_key=$SPACES_SECRET_ACCESS_KEY" \
    -auto-approve; then
    
    echo "‚ö†Ô∏è  Cluster creation failed. Checking if cluster already exists..."
    
    # Check if cluster exists in DigitalOcean but not in Terraform state
    EXISTING_ID=""
    
    if command -v doctl &> /dev/null; then
        echo "üîç Checking for existing cluster using doctl..."
        EXISTING_ID=$(doctl kubernetes cluster list --format ID,Name --no-header | grep "\scumulus$" | awk '{print $1}' || echo "")
    fi
    
    # Fallback to API if doctl not available or didn't find cluster
    if [[ -z "$EXISTING_ID" ]]; then
        echo "üîç Checking for existing cluster using DigitalOcean API..."
        EXISTING_ID=$(curl -s -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
            "https://api.digitalocean.com/v2/kubernetes/clusters" | \
            grep -o '"id":"[^"]*"[^}]*"name":"cumulus"' | \
            grep -o '"id":"[^"]*"' | \
            cut -d'"' -f4 || echo "")
    fi
    
    if [[ -n "$EXISTING_ID" ]]; then
        echo "üîÑ Found existing cluster (ID: $EXISTING_ID). Importing into Terraform state..."
        terraform import \
            -var="do_token=$DIGITALOCEAN_TOKEN" \
            -var="spaces_access_key=$SPACES_ACCESS_KEY_ID" \
            -var="spaces_secret_key=$SPACES_SECRET_ACCESS_KEY" \
            digitalocean_kubernetes_cluster.main "$EXISTING_ID"
        echo "‚úÖ Cluster imported successfully"
    else
        echo "‚ùå No existing cluster found. Creation failed for another reason."
        echo "üí° Please check the DigitalOcean console manually."
        exit 1
    fi
fi

echo "‚úÖ Kubernetes cluster ready"
cd "$REPO_ROOT"

# Step 2: Update kubeconfig (local and GitHub)
echo "üîß Step 2: Updating kubeconfig..."
./scripts/kubeconfig-update-local
./scripts/kubeconfig-update-repo-secret

echo "‚úÖ Kubeconfig updated locally and synced to GitHub"

# Step 3: Deploy SOPS age key
echo "üîê Step 3: Deploying SOPS age key..."
./scripts/sops-age-deploy

echo "‚úÖ SOPS age key deployed"

# Step 4: Bootstrap Flux
echo "üîÑ Step 4: Bootstrapping Flux..."
echo "y" | flux bootstrap git \
    --url=ssh://git@github.com/happyvertical/blueprint.git \
    --branch=main \
    --path=flux/clusters/cumulus

echo "‚úÖ Flux bootstrapped"

# Step 5: Add deploy key to GitHub
echo "üîë Step 5: Adding deploy key to GitHub..."
./scripts/flux-deploy-key-add

echo "‚úÖ Deploy key added to GitHub"

# Step 6: Sync secrets to GitHub and generate encrypted secrets
echo "üîí Step 6: Syncing secrets to GitHub..."
./scripts/secrets-sync-to-github

echo "üîê Generating encrypted secrets..."
./scripts/generate-encrypted-secrets

echo "üì§ Committing encrypted secrets..."
git add flux/clusters/cumulus/*/secrets.enc.yaml
git commit -m "feat: add encrypted secrets for fresh cluster deployment" || echo "No new secrets to commit"
git push

echo "‚úÖ Encrypted secrets generated and committed"

# Step 7: Wait for initial reconciliation
echo "‚è≥ Step 7: Waiting for Flux to reconcile..."
echo "This may take a few minutes as infrastructure components are installed..."

# Wait up to 10 minutes for flux-system to be ready
timeout=600
elapsed=0
while [ $elapsed -lt $timeout ]; do
    if kubectl get kustomization flux-system -n flux-system --no-headers 2>/dev/null | grep -q "True"; then
        echo "‚úÖ Flux system is ready"
        break
    fi
    
    if [ $((elapsed % 60)) -eq 0 ]; then
        echo "‚è≥ Still waiting... ($((elapsed / 60))m elapsed)"
        flux get kustomizations -A | head -5 || true
    fi
    
    sleep 10
    elapsed=$((elapsed + 10))
done

if [ $elapsed -ge $timeout ]; then
    echo "‚ö†Ô∏è  Timeout waiting for Flux. Check status manually with:"
    echo "   flux get all -A"
    echo "   kubectl get pods -A"
else
    echo
    echo "üéâ Cluster Creation Complete!"
    echo
    echo "Your Kubernetes cluster is ready and GitOps is operational."
    echo
    echo "Next steps:"
    echo "‚Ä¢ Monitor deployment: flux get all -A"
    echo "‚Ä¢ Check applications: kubectl get pods -A"
    echo "‚Ä¢ View logs: kubectl logs -f deployment/flux-system -n flux-system"
    echo
    echo "Applications will automatically deploy as Flux reconciles."
    echo "This may take 10-15 minutes for all components to be ready."
fi