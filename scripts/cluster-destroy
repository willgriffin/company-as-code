#!/usr/bin/env bash
set -euo pipefail

# Script to completely destroy the Kubernetes cluster and clean up resources
# This will wipe out everything - use with caution!

# Find repository root
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || echo ".")
cd "$REPO_ROOT"

# Source retry function
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/lib/retry.sh"

echo "=== Blueprint Cluster Destruction ==="
echo
echo "‚ö†Ô∏è  WARNING: This will completely destroy your Kubernetes cluster!"
echo "‚ö†Ô∏è  All data, applications, and configurations will be lost!"
echo

# Confirm destruction
if [[ "${1:-}" != "--force" ]]; then
    echo -n "Are you absolutely sure you want to destroy the cluster? (type 'destroy' to confirm): "
    read -r confirmation
    if [[ "$confirmation" != "destroy" ]]; then
        echo "‚ùå Destruction cancelled"
        exit 0
    fi
fi

# Check if .envrc.secrets exists
if [ ! -f ".envrc.secrets" ]; then
    echo "‚ùå .envrc.secrets not found!"
    echo "Cannot proceed without environment configuration"
    exit 1
fi

# Load environment
echo "üìã Loading environment..."
# shellcheck disable=SC1091
source .envrc.secrets

# Validate required environment variables
required_vars=(
    "DIGITALOCEAN_TOKEN"
    "SPACES_ACCESS_KEY_ID" 
    "SPACES_SECRET_ACCESS_KEY"
)

for var in "${required_vars[@]}"; do
    if [ -z "${!var:-}" ]; then
        echo "‚ùå Required environment variable $var is not set"
        echo "Please check your .envrc.secrets file"
        exit 1
    fi
done

echo "‚úÖ Environment loaded successfully"
echo

# Step 1: Clean up local kubeconfig
echo "üßπ Step 1: Cleaning up local kubeconfig..."
if command -v kubectl &> /dev/null; then
    # Try to remove the cluster context
    kubectl config delete-context cumulus 2>/dev/null || echo "‚ÑπÔ∏è  Context 'cumulus' not found"
    kubectl config delete-cluster cumulus 2>/dev/null || echo "‚ÑπÔ∏è  Cluster 'cumulus' not found"
    kubectl config delete-user cumulus-admin 2>/dev/null || echo "‚ÑπÔ∏è  User 'cumulus-admin' not found"
    echo "‚úÖ Local kubeconfig cleaned"
else
    echo "‚ÑπÔ∏è  kubectl not available, skipping kubeconfig cleanup"
fi

# Step 2: Destroy Terraform infrastructure
echo "üí• Step 2: Destroying Terraform infrastructure..."
cd terraform/digitalocean

# Set environment variables for Terraform backend
export AWS_ACCESS_KEY_ID="$SPACES_ACCESS_KEY_ID"
export AWS_SECRET_ACCESS_KEY="$SPACES_SECRET_ACCESS_KEY"
export DO_TOKEN="$DIGITALOCEAN_TOKEN"

# Export Terraform variables
export TF_VAR_do_token="$DIGITALOCEAN_TOKEN"
export TF_VAR_spaces_access_key="$SPACES_ACCESS_KEY_ID"
export TF_VAR_spaces_secret_key="$SPACES_SECRET_ACCESS_KEY"
export TF_VAR_github_token="$GITHUB_TOKEN"
export TF_VAR_sops_age_private_key="${SOPS_AGE_PRIVATE_KEY:-dummy}"

# Initialize Terraform to ensure we have the latest state (with retry)
retry 3 5 terraform init -upgrade

# Destroy the infrastructure (with retry)
retry 3 30 terraform destroy -auto-approve

echo "‚úÖ Infrastructure destroyed"
cd "$REPO_ROOT"

# Step 3: Clean up orphaned resources
echo "üßπ Step 3: Checking for orphaned DigitalOcean resources..."
echo
echo "Kubernetes may have created load balancers and volumes that Terraform doesn't track."
echo "Running orphaned resource cleanup..."
echo

# Run the cleanup script
if [ -f "$REPO_ROOT/scripts/cluster-cleanup-orphaned-resources" ]; then
    "$REPO_ROOT/scripts/cluster-cleanup-orphaned-resources"
else
    echo "‚ö†Ô∏è  Orphaned resource cleanup script not found"
    echo "You may need to manually clean up:"
    echo "‚Ä¢ Unattached volumes: doctl compute volume list"
    echo "‚Ä¢ Orphaned load balancers: doctl compute load-balancer list"
fi

# Step 4: Optional - Clean up encrypted secrets from git
echo
echo "üîí Step 4: Clean up options..."
echo
echo "The cluster has been destroyed, but encrypted secrets remain in git."
echo "You may want to:"
echo "‚Ä¢ Remove encrypted secrets: rm flux/clusters/cumulus/*/secrets.enc.yaml"
echo "‚Ä¢ Commit the cleanup: git add -A && git commit -m 'cleanup: remove secrets after cluster destruction'"
echo "‚Ä¢ Or keep them for faster re-deployment"
echo

echo "üèÅ Cluster Destruction Complete!"
echo
echo "The Kubernetes cluster and all associated resources have been destroyed."
echo
echo "To recreate the cluster, run:"
echo "  ./scripts/cluster-create"