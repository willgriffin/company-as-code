#!/usr/bin/env bash
set -euo pipefail

# External Secrets Migration Validation Script
# Validates that the migration from SOPS to External Secrets is complete

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[VALIDATE]${NC} $*"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*"
}

error() {
    echo -e "${RED}[ERROR]${NC} $*"
}

usage() {
    cat << EOF
Usage: $0 [OPTION]

Validate External Secrets migration completeness.

Options:
    --help              Show this help message

Validation checks:
    ‚úÖ External Secrets Operator configuration
    ‚úÖ All ExternalSecret resources created
    ‚úÖ No remaining SOPS template files
    ‚úÖ No remaining encrypted secrets
    ‚úÖ Kustomization files updated
    ‚úÖ GitHub Actions updated
EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --help)
            usage
            exit 0
            ;;
        *)
            error "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

cd "$PROJECT_ROOT"

log "üîç Validating External Secrets migration..."

# Initialize counters
ERRORS=0
WARNINGS=0

# Validation 1: External Secrets Operator configuration
log "1. Checking External Secrets Operator configuration..."

if [ -f "flux/clusters/cumulus/controllers/external-secrets-operator/release.yaml" ]; then
    success "External Secrets Operator release found"
else
    error "External Secrets Operator release missing"
    ((ERRORS++))
fi

if [ -f "flux/clusters/cumulus/core/external-secrets/cluster-secret-store.yaml" ]; then
    success "ClusterSecretStore configuration found"
else
    error "ClusterSecretStore configuration missing"
    ((ERRORS++))
fi

# Validation 2: Check for ExternalSecret resources
log "2. Checking ExternalSecret resources..."

external_secret_count=$(find flux/ -name "external-secret*.yaml" | wc -l)
if [ "$external_secret_count" -ge 10 ]; then
    success "Found $external_secret_count ExternalSecret files"
else
    warning "Only found $external_secret_count ExternalSecret files (expected 10+)"
    ((WARNINGS++))
fi

# List all ExternalSecret files
log "   ExternalSecret files found:"
find flux/ -name "external-secret*.yaml" | sort | while read -r file; do
    echo "   ‚úÖ $file"
done

# Validation 3: Check for remaining SOPS files
log "3. Checking for remaining SOPS files..."

sops_template_count=$(find flux/ -name "secrets-template.yaml" 2>/dev/null | wc -l)
if [ "$sops_template_count" -eq 0 ]; then
    success "No secrets-template.yaml files remaining"
else
    error "Found $sops_template_count remaining secrets-template.yaml files:"
    find flux/ -name "secrets-template.yaml" | while read -r file; do
        echo "   ‚ùå $file"
    done
    ((ERRORS++))
fi

sops_encrypted_count=$(find flux/ -name "*.enc.yaml" 2>/dev/null | wc -l)
if [ "$sops_encrypted_count" -eq 0 ]; then
    success "No encrypted SOPS files remaining"
else
    error "Found $sops_encrypted_count remaining encrypted files:"
    find flux/ -name "*.enc.yaml" | while read -r file; do
        echo "   ‚ùå $file"
    done
    ((ERRORS++))
fi

# Validation 4: Check SOPS configuration removal
log "4. Checking SOPS configuration removal..."

if [ ! -f ".sops.yaml" ]; then
    success "SOPS configuration file removed"
else
    error "SOPS configuration file still exists"
    ((ERRORS++))
fi

if [ ! -f ".github/workflows/secrets-management.yml" ]; then
    success "SOPS secrets management workflow removed"
else
    error "SOPS secrets management workflow still exists"
    ((ERRORS++))
fi

# Validation 5: Check kustomization.yaml updates
log "5. Checking kustomization.yaml updates..."

kustomization_files=$(find flux/ -name "kustomization.yaml")
external_secret_refs=0
secrets_template_refs=0

for kustomization in $kustomization_files; do
    if grep -q "external-secret" "$kustomization"; then
        ((external_secret_refs++))
    fi
    if grep -q "secrets-template.yaml" "$kustomization"; then
        echo "   ‚ùå $kustomization still references secrets-template.yaml"
        ((secrets_template_refs++))
    fi
done

if [ "$external_secret_refs" -gt 0 ]; then
    success "Found $external_secret_refs kustomization.yaml files referencing external-secrets"
else
    warning "No kustomization.yaml files reference external-secrets"
    ((WARNINGS++))
fi

if [ "$secrets_template_refs" -eq 0 ]; then
    success "No kustomization.yaml files reference old secrets-template.yaml"
else
    error "Found $secrets_template_refs kustomization.yaml files still referencing secrets-template.yaml"
    ((ERRORS++))
fi

# Validation 6: Check GitHub Actions workflow
log "6. Checking GitHub Actions workflow..."

if [ -f ".github/workflows/external-secrets-setup.yml" ]; then
    success "External Secrets setup workflow found"
    
    # Check for comprehensive environment variables
    env_var_count=$(grep -c "secrets\." ".github/workflows/external-secrets-setup.yml" || true)
    if [ "$env_var_count" -gt 30 ]; then
        success "Found $env_var_count secret references in workflow"
    else
        warning "Only found $env_var_count secret references (expected 30+)"
        ((WARNINGS++))
    fi
else
    error "External Secrets setup workflow missing"
    ((ERRORS++))
fi

# Validation 7: Check central secrets configuration
log "7. Checking central secrets configuration..."

central_secrets_file="flux/clusters/cumulus/core/external-secrets/digitalocean-source-secrets.yaml"
if [ -f "$central_secrets_file" ]; then
    success "Central secrets configuration found"
    
    # Check for various secret categories
    secret_categories=("database-passwords" "admin-passwords" "oauth-credentials" "redis-credentials" "application-secrets")
    for category in "${secret_categories[@]}"; do
        if grep -q "$category" "$central_secrets_file"; then
            echo "   ‚úÖ $category secrets configured"
        else
            warning "$category secrets not found in central configuration"
            ((WARNINGS++))
        fi
    done
else
    error "Central secrets configuration missing"
    ((ERRORS++))
fi

# Validation 8: Check documentation
log "8. Checking documentation..."

if [ -f "docs/EXTERNAL_SECRETS.md" ]; then
    success "External Secrets documentation found"
    
    if grep -q "100% COMPLETE" "docs/EXTERNAL_SECRETS.md"; then
        success "Documentation shows migration complete"
    else
        warning "Documentation may not reflect complete migration"
        ((WARNINGS++))
    fi
else
    error "External Secrets documentation missing"
    ((ERRORS++))
fi

# Summary
log "üìä Validation Summary:"
echo ""
echo "üîç Migration Validation Results:"
echo "   ‚úÖ External Secrets Operator: Configured"
echo "   ‚úÖ ExternalSecret Resources: $external_secret_count found"
echo "   ‚úÖ SOPS Template Cleanup: $([ $sops_template_count -eq 0 ] && echo "Complete" || echo "Incomplete")"
echo "   ‚úÖ SOPS Encrypted Cleanup: $([ $sops_encrypted_count -eq 0 ] && echo "Complete" || echo "Incomplete")"
echo "   ‚úÖ Kustomization Updates: $([ $secrets_template_refs -eq 0 ] && echo "Complete" || echo "Incomplete")"
echo "   ‚úÖ GitHub Actions: $([ -f ".github/workflows/external-secrets-setup.yml" ] && echo "Updated" || echo "Missing")"
echo "   ‚úÖ Central Secrets: $([ -f "$central_secrets_file" ] && echo "Configured" || echo "Missing")"
echo "   ‚úÖ Documentation: $([ -f "docs/EXTERNAL_SECRETS.md" ] && echo "Available" || echo "Missing")"
echo ""

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    success "üéâ External Secrets migration validation PASSED!"
    echo ""
    echo "‚ú® Migration Status: 100% COMPLETE ‚ú®"
    echo ""
    echo "All SOPS-based secret management has been successfully replaced with"
    echo "External Secrets Operator. The template now features:"
    echo ""
    echo "üîê Centralized secret management"
    echo "üîÑ Automatic secret synchronization" 
    echo "‚è∞ Configurable refresh intervals"
    echo "üõ°Ô∏è  Enhanced security with RBAC"
    echo "üìä Comprehensive audit trail"
    echo ""
    echo "Next steps:"
    echo "1. Deploy to staging environment for testing"
    echo "2. Verify secret synchronization works correctly"
    echo "3. Test application connectivity with new secrets"
    echo "4. Deploy to production environment"
elif [ $ERRORS -eq 0 ]; then
    warning "Migration validation passed with $WARNINGS warnings"
    echo ""
    echo "The migration is functionally complete but there are minor issues to address."
    exit 1
else
    error "Migration validation FAILED with $ERRORS errors and $WARNINGS warnings"
    echo ""
    echo "Please address the errors above before considering the migration complete."
    exit 1
fi