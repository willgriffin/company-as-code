#!/usr/bin/env bash
set -euo pipefail

# Script to clean up orphaned DigitalOcean resources after cluster destruction
# This handles resources created by Kubernetes that Terraform doesn't track

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check for required environment variables
if [[ -z "${DIGITALOCEAN_TOKEN:-}" ]]; then
    print_error "DIGITALOCEAN_TOKEN environment variable is not set"
    print_info "Please set: export DIGITALOCEAN_TOKEN=your_token"
    exit 1
fi

# Check if doctl is available
if ! command -v doctl &> /dev/null; then
    print_error "doctl CLI is not installed"
    print_info "Please install doctl: https://docs.digitalocean.com/reference/doctl/how-to/install/"
    exit 1
fi

print_info "Searching for orphaned DigitalOcean resources..."
echo

# Parse config.yaml for cluster name if available
CLUSTER_NAME="cumulus"
if [[ -f "config.yaml" ]] && command -v yq &> /dev/null; then
    CLUSTER_NAME=$(yq eval '.cluster.name' config.yaml)
fi

print_info "Looking for resources tagged with cluster: $CLUSTER_NAME"

# Function to get resource tags
get_resource_tags() {
    local resource_type=$1
    local resource_id=$2
    
    case "$resource_type" in
        "volume")
            doctl compute volume get "$resource_id" --format Tags --no-header
            ;;
        "load-balancer")
            doctl compute load-balancer get "$resource_id" --format Tag --no-header
            ;;
    esac
}

# Clean up orphaned volumes
print_info "Checking for orphaned volumes..."

# Get all volumes
volume_ids=$(doctl compute volume list --format ID --no-header)

if [[ -n "$volume_ids" ]]; then
    orphaned_volumes=()
    
    while IFS= read -r volume_id; do
        # Get volume details
        volume_info=$(doctl compute volume get "$volume_id" --format Name,Tags,Status --no-header)
        volume_name=$(echo "$volume_info" | awk '{print $1}')
        volume_tags=$(echo "$volume_info" | awk '{$1=$NF=""; print $0}' | xargs)
        volume_status=$(echo "$volume_info" | awk '{print $NF}')
        
        # Check if volume is orphaned (unattached and related to our cluster)
        if [[ "$volume_status" == "unattached" ]]; then
            # Check if it's related to our cluster by name pattern or tags
            if [[ "$volume_name" =~ pvc-.*-$CLUSTER_NAME || "$volume_tags" =~ k8s:$CLUSTER_NAME ]]; then
                orphaned_volumes+=("$volume_id")
                print_warning "Found orphaned volume: $volume_name (ID: $volume_id)"
            fi
        fi
    done <<< "$volume_ids"
    
    if [[ ${#orphaned_volumes[@]} -gt 0 ]]; then
        echo
        print_warning "Found ${#orphaned_volumes[@]} orphaned volume(s)"
        
        if [[ "${1:-}" != "--dry-run" ]]; then
            echo -n "Delete these volumes? (y/N): "
            read -r response
            if [[ "$response" =~ ^[Yy]$ ]]; then
                for volume_id in "${orphaned_volumes[@]}"; do
                    print_info "Deleting volume $volume_id..."
                    if doctl compute volume delete "$volume_id" --force; then
                        print_success "Deleted volume $volume_id"
                    else
                        print_error "Failed to delete volume $volume_id"
                    fi
                done
            else
                print_info "Skipping volume deletion"
            fi
        else
            print_info "Dry run mode - no volumes deleted"
        fi
    else
        print_success "No orphaned volumes found"
    fi
else
    print_info "No volumes found"
fi

echo

# Clean up orphaned load balancers
print_info "Checking for orphaned load balancers..."

# Get all load balancers
lb_ids=$(doctl compute load-balancer list --format ID --no-header)

if [[ -n "$lb_ids" ]]; then
    orphaned_lbs=()
    
    while IFS= read -r lb_id; do
        # Get load balancer details
        lb_info=$(doctl compute load-balancer get "$lb_id" --format Name,Tag,Status --no-header)
        lb_name=$(echo "$lb_info" | awk '{print $1}')
        lb_tag=$(echo "$lb_info" | awk '{print $2}')
        lb_status=$(echo "$lb_info" | awk '{print $3}')
        
        # Check if load balancer is related to our cluster
        if [[ "$lb_name" =~ .*-$CLUSTER_NAME-lb || "$lb_tag" =~ k8s:$CLUSTER_NAME ]]; then
            # Check if it has no droplets (orphaned)
            droplet_count=$(doctl compute load-balancer get "$lb_id" --format DropletIDs --no-header | grep -c "," || echo "0")
            if [[ "$droplet_count" == "0" ]]; then
                orphaned_lbs+=("$lb_id")
                print_warning "Found orphaned load balancer: $lb_name (ID: $lb_id)"
            fi
        fi
    done <<< "$lb_ids"
    
    if [[ ${#orphaned_lbs[@]} -gt 0 ]]; then
        echo
        print_warning "Found ${#orphaned_lbs[@]} orphaned load balancer(s)"
        
        if [[ "${1:-}" != "--dry-run" ]]; then
            echo -n "Delete these load balancers? (y/N): "
            read -r response
            if [[ "$response" =~ ^[Yy]$ ]]; then
                for lb_id in "${orphaned_lbs[@]}"; do
                    print_info "Deleting load balancer $lb_id..."
                    if doctl compute load-balancer delete "$lb_id" --force; then
                        print_success "Deleted load balancer $lb_id"
                    else
                        print_error "Failed to delete load balancer $lb_id"
                    fi
                done
            else
                print_info "Skipping load balancer deletion"
            fi
        else
            print_info "Dry run mode - no load balancers deleted"
        fi
    else
        print_success "No orphaned load balancers found"
    fi
else
    print_info "No load balancers found"
fi

echo

# Check for any firewall rules that might be orphaned
print_info "Checking for orphaned firewall rules..."

firewall_ids=$(doctl compute firewall list --format ID,Name --no-header | grep -i "$CLUSTER_NAME" | awk '{print $1}')

if [[ -n "$firewall_ids" ]]; then
    orphaned_firewalls=()
    
    while IFS= read -r fw_id; do
        # Get firewall details
        fw_info=$(doctl compute firewall get "$fw_id" --format Name,DropletIDs --no-header)
        fw_name=$(echo "$fw_info" | awk '{print $1}')
        fw_droplets=$(echo "$fw_info" | awk '{$1=""; print $0}' | xargs)
        
        # Check if firewall has no droplets (orphaned)
        if [[ -z "$fw_droplets" || "$fw_droplets" == "[]" ]]; then
            orphaned_firewalls+=("$fw_id")
            print_warning "Found orphaned firewall: $fw_name (ID: $fw_id)"
        fi
    done <<< "$firewall_ids"
    
    if [[ ${#orphaned_firewalls[@]} -gt 0 ]]; then
        echo
        print_warning "Found ${#orphaned_firewalls[@]} orphaned firewall rule(s)"
        
        if [[ "${1:-}" != "--dry-run" ]]; then
            echo -n "Delete these firewall rules? (y/N): "
            read -r response
            if [[ "$response" =~ ^[Yy]$ ]]; then
                for fw_id in "${orphaned_firewalls[@]}"; do
                    print_info "Deleting firewall $fw_id..."
                    if doctl compute firewall delete "$fw_id" --force; then
                        print_success "Deleted firewall $fw_id"
                    else
                        print_error "Failed to delete firewall $fw_id"
                    fi
                done
            else
                print_info "Skipping firewall deletion"
            fi
        else
            print_info "Dry run mode - no firewalls deleted"
        fi
    else
        print_success "No orphaned firewall rules found"
    fi
else
    print_info "No firewall rules found for cluster $CLUSTER_NAME"
fi

echo
print_success "Orphaned resource cleanup complete!"
echo
print_info "Tips:"
print_info "- Run with --dry-run flag to see what would be deleted without actually deleting"
print_info "- This script looks for resources tagged with or named after cluster: $CLUSTER_NAME"
print_info "- Always verify resources before deletion to avoid accidentally removing needed resources"