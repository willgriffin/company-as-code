name: Terraform Apply

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'

env:
  TF_LOG: INFO
  TF_INPUT: false

jobs:
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: production
    # Skip this job if IS_TEMPLATE repository variable is set to 'true'
    if: vars.IS_TEMPLATE != 'true'
    outputs:
      backup-file: ${{ steps.backup-state.outputs.backup-file }}
      backup-created: ${{ steps.backup-state.outputs.backup-created }}
    permissions:
      contents: write
      deployments: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.1


    - name: Terraform Init
      id: init
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 20
        max_attempts: 3
        retry_wait_seconds: 30
        command: |
          terraform init \
            -backend-config="access_key=${{ secrets.SPACES_ACCESS_KEY_ID }}" \
            -backend-config="secret_key=${{ secrets.SPACES_SECRET_ACCESS_KEY }}"
        working-directory: ./terraform/digitalocean
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}

    - name: Backup Terraform State
      id: backup-state
      run: |
        # Create backup of current terraform state before apply
        if terraform state list > /dev/null 2>&1 && [ -n "$(terraform state list)" ]; then
          echo "Creating Terraform state backup..."
          BACKUP_FILE="terraform-state-backup-$(date +%Y%m%d-%H%M%S).tfstate"
          terraform state pull > "$BACKUP_FILE"
          
          # Store backup info for potential rollback
          echo "backup-file=$BACKUP_FILE" >> $GITHUB_OUTPUT
          echo "backup-created=true" >> $GITHUB_OUTPUT
          echo "✓ State backup created: $BACKUP_FILE"
        else
          echo "No existing state to backup (first deployment)"
          echo "backup-created=false" >> $GITHUB_OUTPUT
        fi
      working-directory: ./terraform/digitalocean
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
        TF_VAR_spaces_access_key: ${{ secrets.SPACES_ACCESS_KEY_ID }}
        TF_VAR_spaces_secret_key: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}

    - name: Terraform Plan
      id: plan
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 20
        max_attempts: 3
        retry_wait_seconds: 60
        command: terraform plan -no-color -out=tfplan
        working-directory: ./terraform/digitalocean
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
        TF_VAR_spaces_access_key: ${{ secrets.SPACES_ACCESS_KEY_ID }}
        TF_VAR_spaces_secret_key: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}

    - name: Terraform Apply
      id: apply
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 20
        max_attempts: 3
        retry_wait_seconds: 120
        command: terraform apply -no-color tfplan
        working-directory: ./terraform/digitalocean
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
        TF_VAR_spaces_access_key: ${{ secrets.SPACES_ACCESS_KEY_ID }}
        TF_VAR_spaces_secret_key: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}

    - name: Commit state lock file if changed
      run: |
        if [[ -n $(git status --porcelain .terraform.lock.hcl) ]]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .terraform.lock.hcl
          git commit -m "Update Terraform state lock file [skip ci]"
          git push
        fi
      working-directory: ./terraform/digitalocean

    - name: Update KUBECONFIG secret
      if: success()
      run: |
        # Get kubeconfig from Terraform output
        KUBECONFIG_CONTENT=$(terraform output -raw kubeconfig)
        
        # Update the repository secret using GitHub CLI
        echo "$KUBECONFIG_CONTENT" | gh secret set KUBECONFIG
      working-directory: ./terraform/digitalocean
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create deployment record
      uses: actions/github-script@v7
      if: always()
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            task: 'terraform:apply',
            auto_merge: false,
            required_contexts: [],
            environment: 'production',
            description: 'Terraform Apply'
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: '${{ steps.apply.outcome }}' === 'success' ? 'success' : 'failure',
            environment_url: 'https://cloud.digitalocean.com',
            description: 'Terraform Apply ${{ steps.apply.outcome }}'
          });

  rollback-on-failure:
    name: Rollback on Terraform Apply Failure
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: terraform-apply
    if: failure() && needs.terraform-apply.outputs.backup-created == 'true'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.1

    - name: Terraform Init for Rollback
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 20
        max_attempts: 3
        retry_wait_seconds: 30
        command: |
          terraform init \
            -backend-config="access_key=${{ secrets.SPACES_ACCESS_KEY_ID }}" \
            -backend-config="secret_key=${{ secrets.SPACES_SECRET_ACCESS_KEY }}"
        working-directory: ./terraform/digitalocean
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}

    - name: Restore Terraform State
      run: |
        echo "Terraform apply failed, attempting to restore previous state..."
        BACKUP_FILE="${{ needs.terraform-apply.outputs.backup-file }}"
        
        if [ -f "$BACKUP_FILE" ]; then
          echo "Restoring state from backup: $BACKUP_FILE"
          terraform state push "$BACKUP_FILE"
          echo "✓ State restored from backup"
        else
          echo "⚠️ Backup file not found, manual intervention may be required"
          exit 1
        fi
      working-directory: ./terraform/digitalocean
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
        TF_VAR_spaces_access_key: ${{ secrets.SPACES_ACCESS_KEY_ID }}
        TF_VAR_spaces_secret_key: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}

    - name: Verify Rollback
      run: |
        echo "Verifying rollback by checking current state..."
        terraform plan -detailed-exitcode
        
        if [ $? -eq 0 ]; then
          echo "✓ Rollback successful - infrastructure matches backed up state"
        else
          echo "⚠️ Rollback verification failed - manual intervention required"
        fi
      working-directory: ./terraform/digitalocean
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
        TF_VAR_spaces_access_key: ${{ secrets.SPACES_ACCESS_KEY_ID }}
        TF_VAR_spaces_secret_key: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}