name: Terraform Apply

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'

env:
  TF_LOG: INFO
  TF_INPUT: false

jobs:
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.1


    - name: Terraform Init
      id: init
      run: |
        terraform init \
          -backend-config="access_key=${{ secrets.SPACES_ACCESS_KEY_ID }}" \
          -backend-config="secret_key=${{ secrets.SPACES_SECRET_ACCESS_KEY }}"
      working-directory: ./terraform/digitalocean
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -out=tfplan
      working-directory: ./terraform/digitalocean
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
        TF_VAR_spaces_access_key: ${{ secrets.SPACES_ACCESS_KEY_ID }}
        TF_VAR_spaces_secret_key: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}

    - name: Terraform Apply
      id: apply
      run: terraform apply -no-color tfplan
      working-directory: ./terraform/digitalocean
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
        TF_VAR_spaces_access_key: ${{ secrets.SPACES_ACCESS_KEY_ID }}
        TF_VAR_spaces_secret_key: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}

    - name: Commit state lock file if changed
      run: |
        if [[ -n $(git status --porcelain) ]]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Update Terraform state lock file [skip ci]"
          git push
        fi

    - name: Create deployment record
      uses: actions/github-script@v7
      if: always()
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            task: 'terraform:apply',
            auto_merge: false,
            required_contexts: [],
            environment: 'production',
            description: 'Terraform Apply'
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: '${{ steps.apply.outcome }}' === 'success' ? 'success' : 'failure',
            environment_url: 'https://cloud.digitalocean.com',
            description: 'Terraform Apply ${{ steps.apply.outcome }}'
          });