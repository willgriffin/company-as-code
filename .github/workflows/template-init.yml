name: Initialize Repository from Template

on:
  create:
  push:
    branches: [main]
    paths: ['.github/template.yml']

# Only run on repositories created from this template, not the template itself
# GitHub automatically sets the 'template_repository' context

jobs:
  initialize:
    name: Initialize Repository
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Only run if this is NOT the template repository itself
    if: github.repository != 'willgriffin/startup-gitops-template' && github.repository != github.event.repository.template_repository.full_name
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup tools
        uses: ./.github/actions/setup-tools
        with:
          tools: 'gomplate,yq'

      - name: Generate config from template form
        run: |
          echo "🔧 Generating config from template form responses..."
          
          # Extract form responses from repository variables
          DOMAIN="${{ vars.INIT_DOMAIN || 'example.com' }}"
          CLUSTER_NAME="${{ vars.INIT_CLUSTER_NAME || 'production' }}"
          REGION="${{ vars.INIT_REGION || 'nyc3' }}"
          SERVICES="${{ vars.INIT_SERVICES || 'nextcloud,mattermost' }}"
          MONITORING="${{ vars.INIT_MONITORING || 'prometheus,grafana,jaeger' }}"
          AI_GATEWAY="${{ vars.INIT_AI_GATEWAY || 'true' }}"
          
          echo "📝 Configuration from form:"
          echo "  Domain: $DOMAIN"
          echo "  Cluster: $CLUSTER_NAME"
          echo "  Region: $REGION"
          echo "  Services: $SERVICES"
          echo "  Monitoring: $MONITORING"
          echo "  AI Gateway: $AI_GATEWAY"
          
          # Convert checkbox values to boolean
          NEXTCLOUD_ENABLED=$(echo "$SERVICES" | grep -q "nextcloud" && echo "true" || echo "false")
          MATTERMOST_ENABLED=$(echo "$SERVICES" | grep -q "mattermost" && echo "true" || echo "false")
          MAILU_ENABLED=$(echo "$SERVICES" | grep -q "mailu" && echo "true" || echo "false")
          POSTAL_ENABLED=$(echo "$SERVICES" | grep -q "postal" && echo "true" || echo "false")
          
          PROMETHEUS_ENABLED=$(echo "$MONITORING" | grep -q "prometheus" && echo "true" || echo "false")
          GRAFANA_ENABLED=$(echo "$MONITORING" | grep -q "grafana" && echo "true" || echo "false")
          JAEGER_ENABLED=$(echo "$MONITORING" | grep -q "jaeger" && echo "true" || echo "false")
          SENTRY_ENABLED=$(echo "$MONITORING" | grep -q "sentry" && echo "true" || echo "false")
          
          # Create config.yaml for gomplate processing
          cat > config.yaml << EOF
          domain:
            primary: "$DOMAIN"
          
          cluster:
            name: "$CLUSTER_NAME"
            region: "$REGION"
          
          services:
            nextcloud:
              enabled: $NEXTCLOUD_ENABLED
            mattermost:
              enabled: $MATTERMOST_ENABLED
            mailu:
              enabled: $MAILU_ENABLED
            postal:
              enabled: $POSTAL_ENABLED
          
          monitoring:
            prometheus:
              enabled: $PROMETHEUS_ENABLED
            grafana:
              enabled: $GRAFANA_ENABLED
            jaeger:
              enabled: $JAEGER_ENABLED
            sentry:
              enabled: $SENTRY_ENABLED
            opentelemetry:
              enabled: true
            loki:
              enabled: false
          
          platform:
            knative:
              enabled: true
          
          ai:
            gateway:
              enabled: $AI_GATEWAY
          EOF

      - name: Process gomplate templates
        run: |
          echo "🏗️  Processing gomplate templates..."
          
          # Process all YAML files that contain gomplate template syntax
          find flux/clusters/cumulus -name "*.yaml" -type f | while read -r file; do
            if grep -q "(datasource \"config\")" "$file" 2>/dev/null; then
              echo "  Processing: $file"
              # Create temporary file for gomplate output
              temp_file=$(mktemp)
              
              # Process template with config.yaml as datasource
              gomplate --datasource config=config.yaml --file "$file" --out "$temp_file"
              
              # Replace original file with processed version
              mv "$temp_file" "$file"
              
              echo "  ✅ Processed: $file"
            fi
          done

      - name: Process environment variable templates
        run: |
          echo "🔧 Processing environment variable templates..."
          
          # Process files that use {{ .Env.* }} syntax
          find flux/clusters/cumulus -name "*template*.yaml" -type f | while read -r file; do
            if grep -q "{{ \.Env\." "$file" 2>/dev/null; then
              echo "  Processing env template: $file"
              # These files need environment variables at deployment time
              # Add a comment to indicate they need runtime processing
              sed -i '1i# This file contains environment variable templates that will be processed during deployment' "$file"
            fi
          done

      - name: Remove template-specific files
        run: |
          echo "🧹 Removing template-specific files..."
          
          # Remove template repository files
          rm -f .github/template-cleanup
          rm -f .github/workflows/template-init.yml
          rm -f config.yaml.example
          
          # CLEAN BREAK: Remove config.yaml since manifests are now hardcoded
          rm -f config.yaml
          
          # Remove template validation scripts that depend on config.yaml
          rm -f scripts/validate-kong-yaml
          
          # Mark repository as initialized
          echo "Template repository initialization complete" > .template-initialized

      - name: Update workflows for standard GitOps
        run: |
          echo "⚙️  Updating workflows for standard GitOps repository..."
          
          # Remove gomplate processing from cluster-deploy.yml since templates are now processed
          if [ -f .github/workflows/cluster-deploy.yml ]; then
            # Remove the gomplate processing section
            yq eval 'del(.jobs.*.steps[] | select(.name == "Process Domain Templates"))' -i .github/workflows/cluster-deploy.yml
            
            # Remove gomplate from tool requirements
            sed -i "s/,gomplate//g" .github/workflows/cluster-deploy.yml
            sed -i "s/gomplate,//g" .github/workflows/cluster-deploy.yml
          fi

      - name: Create initialization summary
        run: |
          echo "📋 Creating initialization summary..."
          
          cat > INITIALIZATION.md << EOF
          # Repository Initialization Complete
          
          This repository has been automatically initialized from the GitOps template.
          
          ## What was processed:
          - ✅ Gomplate templates converted to standard YAML
          - ✅ Template-specific files removed
          - ✅ Workflows updated for standard GitOps
          - ✅ Base configuration created
          
          ## ✅ Automatic Configuration Complete
          
          Your repository has been configured with:
          - **Domain**: ${{ vars.INIT_DOMAIN || 'example.com' }}
          - **Cluster**: ${{ vars.INIT_CLUSTER_NAME || 'production' }} 
          - **Region**: ${{ vars.INIT_REGION || 'nyc3' }}
          - **Services**: ${{ vars.INIT_SERVICES || 'nextcloud,mattermost' }}
          - **Monitoring**: ${{ vars.INIT_MONITORING || 'prometheus,grafana,jaeger' }}
          
          ## Next steps:
          
          1. **Set up GitHub Secrets** in repository settings:
             - DIGITALOCEAN_TOKEN (DigitalOcean API token)
             - SOPS_AGE_PRIVATE_KEY (for secret encryption)
             
             _Cluster settings are already configured from your form responses_
          
          3. **Generate secrets**:
             \`\`\`bash
             ./scripts/generate-secrets
             \`\`\`
          
          4. **Deploy infrastructure**:
             - Push changes to main branch
             - Workflows will automatically deploy Terraform and Flux
          
          ## Customizing Your Deployment
          
          ### Change Domain Names
          \`\`\`bash
          # Replace all instances of example.com with your domain
          find flux/ -name "*.yaml" -exec sed -i 's/example\.com/yourdomain.com/g' {} +
          \`\`\`
          
          ### Enable/Disable Services
          Edit \`flux/clusters/cumulus/apps.yaml\` and comment out unwanted services:
          \`\`\`yaml
          # - name: mattermost  # Disable by commenting out
          \`\`\`
          
          ### Configure Cluster Settings
          Set GitHub Secrets instead of editing config files:
          - \`TF_VAR_cluster_name\` - Your cluster name
          - \`TF_VAR_region\` - DigitalOcean region
          - \`TF_VAR_node_size\` - Node size (optional)
          
          ## Standard GitOps Repository
          
          This is now a standard GitOps repository! You can use:
          - \`flux check --path flux/clusters/cumulus\`
          - \`kubectl apply -k flux/clusters/cumulus\`
          - Standard Kubernetes tooling
          
          The gomplate template processing has been completed and removed.
          EOF

      - name: Commit processed files
        run: |
          echo "💾 Committing processed repository..."
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add .
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🚀 Initialize repository from GitOps template

          - Process gomplate templates to standard YAML
          - Remove template-specific files  
          - Update workflows for standard GitOps
          - Create base configuration
          
          Repository is now ready for customization and deployment."
            
            git push origin main
            
            echo "✅ Repository initialization complete!"
          fi

      - name: Set up Terraform variables
        run: |
          echo "⚙️  Setting up Terraform variables from form responses..."
          
          # Create terraform.tfvars with form responses
          mkdir -p terraform/digitalocean
          cat > terraform/digitalocean/terraform.tfvars << EOF
          # Terraform configuration from template form
          cluster_name = "${{ vars.INIT_CLUSTER_NAME || 'production' }}"
          region = "${{ vars.INIT_REGION || 'nyc3' }}"
          EOF
          
          # Add terraform.tfvars to gitignore to avoid committing sensitive data
          echo "terraform/digitalocean/terraform.tfvars" >> .gitignore
          
          echo "✅ Terraform variables configured"

      - name: Create cleanup issue
        run: |
          echo "📝 Creating template cleanup completion issue..."
          
          # Use heredoc for proper multi-line body formatting
          ISSUE_BODY=$(cat <<'EOF'
          🎉 **Repository successfully initialized from GitOps template!**

          ## What was configured:
          - **Domain**: ${{ vars.INIT_DOMAIN || 'example.com' }}
          - **Cluster**: ${{ vars.INIT_CLUSTER_NAME || 'production' }}
          - **Region**: ${{ vars.INIT_REGION || 'nyc3' }}
          - **Services**: ${{ vars.INIT_SERVICES || 'nextcloud,mattermost' }}

          ## Template artifacts cleaned up:
          - ✅ Gomplate templates → Standard Kubernetes YAML
          - ✅ config.yaml removed (no longer needed)
          - ✅ Template validation scripts removed
          - ✅ Terraform variables configured
          - ✅ Repository ready for deployment

          **This is now a standard GitOps repository!** You can close this issue.

          Next: Set up GitHub Secrets and run `./scripts/generate-secrets`
          EOF
          )
          
          gh issue create \
            --title "✅ Template Initialization Complete" \
            --body "$ISSUE_BODY" \
            --label "template-cleanup" \
            --assignee "${{ github.actor }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}