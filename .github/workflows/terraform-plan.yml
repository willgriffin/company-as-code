name: Terraform Plan

on:
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'

env:
  TF_LOG: INFO
  TF_INPUT: false

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.1

    - name: Terraform Init
      id: init
      run: |
        terraform init \
          -backend-config="access_key=${{ secrets.SPACES_ACCESS_KEY_ID }}" \
          -backend-config="secret_key=${{ secrets.SPACES_SECRET_ACCESS_KEY }}"
      working-directory: ./terraform/digitalocean
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -out=tfplan 2>&1 | tee plan.txt
        terraform show -no-color tfplan 2>&1 | tee -a plan.txt
      working-directory: ./terraform/digitalocean
      env:
        TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
        TF_VAR_spaces_access_key: ${{ secrets.SPACES_ACCESS_KEY_ID }}
        TF_VAR_spaces_secret_key: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
      continue-on-error: true

    - name: Create Plan Summary
      id: plan-summary
      run: |
        if [ -f ./terraform/digitalocean/plan.txt ]; then
          PLAN_OUTPUT=$(cat ./terraform/digitalocean/plan.txt)
          
          # Sanitize output to remove any potential secrets
          PLAN_OUTPUT=$(echo "$PLAN_OUTPUT" | sed -E 's/(secret|token|password|key)([[:space:]]*=[[:space:]]*)"[^"]*"/\1\2"***"/gi')
          
          # Escape special characters for GitHub Actions
          PLAN_OUTPUT="${PLAN_OUTPUT//'%'/'%25'}"
          PLAN_OUTPUT="${PLAN_OUTPUT//$'\n'/'%0A'}"
          PLAN_OUTPUT="${PLAN_OUTPUT//$'\r'/'%0D'}"
          
          echo "plan_output<<EOF" >> $GITHUB_OUTPUT
          echo "$PLAN_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Comment PR with Plan
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Plan ðŸ“– \`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${{ steps.plan-summary.outputs.plan_output }}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan');
          });
          
          // Update or create comment
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            });
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
          }

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1