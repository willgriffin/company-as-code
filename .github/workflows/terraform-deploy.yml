name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-deploy.yml'

env:
  TF_VERSION: '1.7.0'
  DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  terraform-digitalocean:
    name: Terraform DigitalOcean
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform/digitalocean
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Get GitHub info
        id: github
        run: |
          echo "owner=${GITHUB_REPOSITORY_OWNER}" >> $GITHUB_OUTPUT
          echo "repo=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT
      
      - name: Create Spaces credentials
        run: |
          # Create backend config for Terraform state
          cat > backend.conf <<EOF
          access_key = "${{ secrets.DIGITALOCEAN_SPACES_ACCESS_KEY }}"
          secret_key = "${{ secrets.DIGITALOCEAN_SPACES_SECRET_KEY }}"
          EOF
      
      - name: Terraform Init
        run: |
          terraform init -backend-config=backend.conf
      
      - name: Terraform Plan
        if: github.event.inputs.action == 'plan' || github.event.inputs.action == ''
        run: |
          terraform plan \
            -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}" \
            -var="github_owner=${{ steps.github.outputs.owner }}" \
            -var="github_repo=${{ steps.github.outputs.repo }}" \
            -out=tfplan
      
      - name: Terraform Apply
        if: github.event.inputs.action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
        run: |
          terraform apply -auto-approve \
            -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}" \
            -var="github_owner=${{ steps.github.outputs.owner }}" \
            -var="github_repo=${{ steps.github.outputs.repo }}"
      
      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          terraform destroy -auto-approve \
            -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}" \
            -var="github_owner=${{ steps.github.outputs.owner }}" \
            -var="github_repo=${{ steps.github.outputs.repo }}"
      
      - name: Save Kubeconfig
        if: github.event.inputs.action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
        run: |
          terraform output -raw kubeconfig > kubeconfig.yaml
          echo "KUBECONFIG_BASE64=$(base64 -w 0 kubeconfig.yaml)" >> $GITHUB_ENV
      
      - name: Update Kubeconfig Secret
        if: github.event.inputs.action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
        uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: 'KUBECONFIG'
          value: ${{ env.KUBECONFIG_BASE64 }}
          token: ${{ secrets.GITHUB_TOKEN }}

  terraform-aws:
    name: Terraform AWS
    runs-on: ubuntu-latest
    needs: terraform-digitalocean
    if: github.event.inputs.action != 'destroy'
    defaults:
      run:
        working-directory: terraform/aws
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Create Spaces credentials
        run: |
          # Create backend config for Terraform state
          cat > backend.conf <<EOF
          access_key = "${{ secrets.DIGITALOCEAN_SPACES_ACCESS_KEY }}"
          secret_key = "${{ secrets.DIGITALOCEAN_SPACES_SECRET_KEY }}"
          EOF
      
      - name: Terraform Init
        run: |
          terraform init -backend-config=backend.conf
      
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var="aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"