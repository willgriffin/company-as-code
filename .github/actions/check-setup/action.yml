name: 'Check Repository Setup'
description: 'Validates that the repository has been properly configured from the template'
inputs:
  strict:
    description: 'Fail if any setup issues are found'
    required: false
    default: 'true'
  digitalocean-token:
    description: 'DigitalOcean API token'
    required: false
  aws-access-key-id:
    description: 'AWS access key ID'
    required: false
  aws-secret-access-key:
    description: 'AWS secret access key'
    required: false
  ses-smtp-username:
    description: 'SES SMTP username'
    required: false
  ses-smtp-password:
    description: 'SES SMTP password'
    required: false
  terraform-state-bucket:
    description: 'Terraform state bucket name'
    required: false
  terraform-state-region:
    description: 'Terraform state bucket region'
    required: false
  project-name:
    description: 'Project name for CDKTF stacks'
    required: false
  admin-email:
    description: 'Admin email address'
    required: false
  domain:
    description: 'Primary domain'
    required: false
  anthropic-api-key:
    description: 'Anthropic API key'
    required: false
  openai-api-key:
    description: 'OpenAI API key (optional)'
    required: false
  cohere-api-key:
    description: 'Cohere API key (optional)'
    required: false
  kubeconfig:
    description: 'Kubernetes config (set by terraform-deploy)'
    required: false
outputs:
  setup-complete:
    description: 'Whether the repository setup is complete'
    value: ${{ steps.check.outputs.setup-complete }}
  missing-items:
    description: 'List of missing setup items'
    value: ${{ steps.check.outputs.missing-items }}

runs:
  using: 'composite'
  steps:
    - name: Check repository setup
      id: check
      shell: bash
      run: |
        echo "üîç Checking repository setup status..."
        
        SETUP_COMPLETE=true
        MISSING_ITEMS=""
        
        # Check core infrastructure secrets (set during setup)
        echo "Checking core infrastructure secrets..."
        
        # Core required secrets
        if [[ -z "${{ inputs.digitalocean-token }}" ]]; then
          SETUP_COMPLETE=false
          MISSING_ITEMS="$MISSING_ITEMS- DIGITALOCEAN_TOKEN secret is missing (run npx tsx setup.ts)\n"
          echo "‚ùå DIGITALOCEAN_TOKEN secret is missing"
        else
          echo "‚úÖ DIGITALOCEAN_TOKEN secret is set"
        fi
        
        if [[ -z "${{ inputs.aws-access-key-id }}" ]]; then
          SETUP_COMPLETE=false
          MISSING_ITEMS="$MISSING_ITEMS- AWS_ACCESS_KEY_ID secret is missing (run npx tsx setup.ts)\n"
          echo "‚ùå AWS_ACCESS_KEY_ID secret is missing"
        else
          echo "‚úÖ AWS_ACCESS_KEY_ID secret is set"
        fi
        
        if [[ -z "${{ inputs.aws-secret-access-key }}" ]]; then
          SETUP_COMPLETE=false
          MISSING_ITEMS="$MISSING_ITEMS- AWS_SECRET_ACCESS_KEY secret is missing (run npx tsx setup.ts)\n"
          echo "‚ùå AWS_SECRET_ACCESS_KEY secret is missing"
        else
          echo "‚úÖ AWS_SECRET_ACCESS_KEY secret is set"
        fi
        
        
        if [[ -z "${{ inputs.project-name }}" ]]; then
          SETUP_COMPLETE=false
          MISSING_ITEMS="$MISSING_ITEMS- PROJECT_NAME secret is missing (run npx tsx setup.ts)\n"
          echo "‚ùå PROJECT_NAME secret is missing"
        else
          echo "‚úÖ PROJECT_NAME secret is set"
        fi
        
        # Auto-generated secrets (created by setup-repo.sh)
        echo "Checking auto-generated secrets..."
        
        
        if [[ -z "${{ inputs.terraform-state-bucket }}" ]]; then
          SETUP_COMPLETE=false
          MISSING_ITEMS="$MISSING_ITEMS- TERRAFORM_STATE_BUCKET secret missing (auto-generated by setup)\n"
          echo "‚ùå TERRAFORM_STATE_BUCKET secret missing"
        else
          echo "‚úÖ TERRAFORM_STATE_BUCKET secret is set"
        fi
        
        if [[ -z "${{ inputs.terraform-state-region }}" ]]; then
          SETUP_COMPLETE=false
          MISSING_ITEMS="$MISSING_ITEMS- TERRAFORM_STATE_REGION secret missing (auto-generated by setup)\n"
          echo "‚ùå TERRAFORM_STATE_REGION secret missing"
        else
          echo "‚úÖ TERRAFORM_STATE_REGION secret is set"
        fi
        
        if [[ -z "${{ inputs.ses-smtp-username }}" ]]; then
          SETUP_COMPLETE=false
          MISSING_ITEMS="$MISSING_ITEMS- SES_SMTP_USERNAME secret missing (auto-generated by setup)\n"
          echo "‚ùå SES_SMTP_USERNAME secret missing"
        else
          echo "‚úÖ SES_SMTP_USERNAME secret is set"
        fi
        
        if [[ -z "${{ inputs.ses-smtp-password }}" ]]; then
          SETUP_COMPLETE=false
          MISSING_ITEMS="$MISSING_ITEMS- SES_SMTP_PASSWORD secret missing (auto-generated by setup)\n"
          echo "‚ùå SES_SMTP_PASSWORD secret missing"
        else
          echo "‚úÖ SES_SMTP_PASSWORD secret is set"
        fi
        
        if [[ -z "${{ inputs.admin-email }}" ]]; then
          SETUP_COMPLETE=false
          MISSING_ITEMS="$MISSING_ITEMS- ADMIN_EMAIL secret missing (set by setup)\n"
          echo "‚ùå ADMIN_EMAIL secret missing"
        else
          echo "‚úÖ ADMIN_EMAIL secret is set"
        fi
        
        if [[ -z "${{ inputs.domain }}" ]]; then
          SETUP_COMPLETE=false
          MISSING_ITEMS="$MISSING_ITEMS- DOMAIN secret missing (set by setup)\n"
          echo "‚ùå DOMAIN secret missing"
        else
          echo "‚úÖ DOMAIN secret is set"
        fi
        
        # Check for required configuration files
        echo "Checking required configuration files..."
        
        REQUIRED_FILES=(
          "platform/config.json"
        )
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [[ ! -f "$file" ]]; then
            SETUP_COMPLETE=false
            MISSING_ITEMS="$MISSING_ITEMS- Required file $file is missing\n"
            echo "‚ùå Required file $file is missing"
          else
            echo "‚úÖ Required file $file exists"
          fi
        done
        
        # Check for required GitHub secrets
        echo "Checking required GitHub secrets..."
        
        # Function to check if a secret appears to be set (GitHub doesn't expose secret values)
        # We use the fact that GitHub Actions will replace undefined secrets with empty strings
        check_secret() {
          local secret_name="$1"
          local secret_value="$2"
          
          if [[ -z "$secret_value" ]]; then
            SETUP_COMPLETE=false
            MISSING_ITEMS="$MISSING_ITEMS- GitHub secret $secret_name is not set\n"
            echo "‚ùå GitHub secret $secret_name is not set"
            return 1
          else
            echo "‚úÖ GitHub secret $secret_name appears to be set"
            return 0
          fi
        }
        
        # Required secrets for terraform-deploy workflow
        check_secret "DIGITALOCEAN_TOKEN" "${{ inputs.digitalocean-token }}"
        check_secret "AWS_ACCESS_KEY_ID" "${{ inputs.aws-access-key-id }}"
        check_secret "AWS_SECRET_ACCESS_KEY" "${{ inputs.aws-secret-access-key }}"
        check_secret "PROJECT_NAME" "${{ inputs.project-name }}"
        check_secret "TERRAFORM_STATE_BUCKET" "${{ inputs.terraform-state-bucket }}"
        check_secret "TERRAFORM_STATE_REGION" "${{ inputs.terraform-state-region }}"
        
        # Required secrets for flux-bootstrap workflow
        check_secret "SES_SMTP_USERNAME" "${{ inputs.ses-smtp-username }}"
        check_secret "SES_SMTP_PASSWORD" "${{ inputs.ses-smtp-password }}"
        check_secret "ADMIN_EMAIL" "${{ inputs.admin-email }}"
        check_secret "DOMAIN" "${{ inputs.domain }}"
        
        
        # Optional secrets (warn if not set)
        if [[ -z "${{ inputs.openai-api-key }}" ]]; then
          echo "‚ö†Ô∏è Optional secret OPENAI_API_KEY is not set"
        else
          echo "‚úÖ Optional secret OPENAI_API_KEY is set"
        fi
        
        if [[ -z "${{ inputs.cohere-api-key }}" ]]; then
          echo "‚ö†Ô∏è Optional secret COHERE_API_KEY is not set"
        else
          echo "‚úÖ Optional secret COHERE_API_KEY is set"
        fi
        
        # KUBECONFIG is set by terraform-deploy workflow, so we check if it exists
        if [[ -z "${{ inputs.kubeconfig }}" ]]; then
          echo "‚ÑπÔ∏è KUBECONFIG secret not yet set (will be created by terraform-deploy workflow)"
        else
          echo "‚úÖ KUBECONFIG secret is set"
        fi
        
        # Check for template-specific files that should be removed after setup
        echo "Checking for template-specific files..."
        
        TEMPLATE_FILES=(
          ".github/workflows/create-setup-issue.yml"
          "README-TEMPLATE.md"
        )
        
        for file in "${TEMPLATE_FILES[@]}"; do
          if [[ -f "$file" ]]; then
            echo "‚ÑπÔ∏è Template file $file still exists (will be cleaned up after successful deployment)"
          fi
        done
        
        # Check for obvious template placeholders that would prevent deployment
        echo "Checking for critical template placeholders..."
        
        # Search for CHANGEME placeholders but exclude legitimate automated replacement targets
        # Exclude:
        # - platform/src/stacks/ (contains replacement logic)
        # - manifests/infrastructure/ (contains automated placeholders for flux-configuration)
        # - docs/ (documentation only)
        if grep -r -i "changeme" --include="*.yml" --include="*.yaml" --include="*.tf" \
          --exclude-dir=docs \
          --exclude-dir=platform \
          --exclude-dir=manifests \
          . >/dev/null 2>&1; then
          SETUP_COMPLETE=false
          MISSING_ITEMS="$MISSING_ITEMS- Critical template placeholders (CHANGEME) still present\n"
          echo "‚ùå Found CHANGEME placeholders that will prevent deployment"
        else
          echo "‚úÖ No critical CHANGEME placeholders found"
        fi
        
        # Set outputs
        echo "setup-complete=$SETUP_COMPLETE" >> $GITHUB_OUTPUT
        echo -e "missing-items=$MISSING_ITEMS" >> $GITHUB_OUTPUT
        
        # Summary
        if [[ "$SETUP_COMPLETE" == "true" ]]; then
          echo "‚úÖ Repository setup is complete and ready for deployment!"
        else
          echo "‚ùå Repository setup is incomplete"
          echo -e "Missing items:\n$MISSING_ITEMS"
          echo ""
          echo "To complete setup:"
          echo "1. Ensure all required GitHub secrets are configured in Settings ‚Üí Secrets and variables ‚Üí Actions"
          echo "2. Run 'npx tsx setup.ts' to configure prerequisites and secrets"
          echo "3. Verify platform/config.json has been properly configured"
          
          if [[ "${{ inputs.strict }}" == "true" ]]; then
            echo "::error::Repository setup is incomplete. Please configure all required secrets and run 'npx tsx setup.ts' to complete setup."
            exit 1
          else
            echo "::warning::Repository setup is incomplete. Please configure all required secrets and consider running 'npx tsx setup.ts' to complete setup."
          fi
        fi