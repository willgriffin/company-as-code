name: 'Validate Repository Configuration'
description: 'Validates that the repository configuration is properly set up before cluster deployment'
inputs:
  digitalocean-token:
    description: 'DigitalOcean API token'
    required: true
  github-token:
    description: 'GitHub token'
    required: true
  sops-age-private-key:
    description: 'SOPS Age private key'
    required: false
outputs:
  valid:
    description: 'Whether the configuration is valid'
    value: ${{ steps.validate.outputs.valid }}
  errors:
    description: 'Configuration validation errors'
    value: ${{ steps.validate.outputs.errors }}

runs:
  using: 'composite'
  steps:
    - name: Setup tools
      uses: ./.github/actions/setup-tools
      with:
        tools: 'yq'

    - name: Validate configuration
      id: validate
      shell: bash
      run: |
        set -e
        
        ERRORS=""
        VALID="true"
        
        # Check if config.yaml exists
        if [ ! -f "config.yaml" ]; then
          ERRORS="❌ config.yaml file not found. Please copy config.yaml.example and customize it."
          VALID="false"
        else
          echo "✅ config.yaml found"
          
          # Validate required fields
          PRIMARY_DOMAIN=$(yq eval '.domain.primary' config.yaml)
          REPO_OWNER=$(yq eval '.repository.owner' config.yaml)
          REPO_NAME=$(yq eval '.repository.name' config.yaml)
          CLUSTER_NAME=$(yq eval '.cluster.name' config.yaml)
          REGION=$(yq eval '.cluster.region' config.yaml)
          
          # Check for placeholder values
          if [ "$PRIMARY_DOMAIN" = "example.com" ]; then
            ERRORS="${ERRORS}\n❌ Please update domain.primary from the placeholder value 'example.com'"
            VALID="false"
          elif [ "$PRIMARY_DOMAIN" = "null" ] || [ -z "$PRIMARY_DOMAIN" ]; then
            ERRORS="${ERRORS}\n❌ domain.primary is required"
            VALID="false"
          else
            echo "✅ Primary domain: $PRIMARY_DOMAIN"
          fi
          
          if [ "$REPO_OWNER" = "your-github-username" ]; then
            ERRORS="${ERRORS}\n❌ Please update repository.owner from the placeholder value 'your-github-username'"
            VALID="false"
          elif [ "$REPO_OWNER" = "null" ] || [ -z "$REPO_OWNER" ]; then
            ERRORS="${ERRORS}\n❌ repository.owner is required"
            VALID="false"
          else
            echo "✅ Repository owner: $REPO_OWNER"
          fi
          
          if [ "$REPO_NAME" = "your-repo-name" ]; then
            ERRORS="${ERRORS}\n❌ Please update repository.name from the placeholder value 'your-repo-name'"
            VALID="false"
          elif [ "$REPO_NAME" = "null" ] || [ -z "$REPO_NAME" ]; then
            ERRORS="${ERRORS}\n❌ repository.name is required"
            VALID="false"
          else
            echo "✅ Repository name: $REPO_NAME"
          fi
          
          if [ "$CLUSTER_NAME" = "null" ] || [ -z "$CLUSTER_NAME" ]; then
            ERRORS="${ERRORS}\n❌ cluster.name is required"
            VALID="false"
          else
            echo "✅ Cluster name: $CLUSTER_NAME"
          fi
          
          if [ "$REGION" = "null" ] || [ -z "$REGION" ]; then
            ERRORS="${ERRORS}\n❌ cluster.region is required"
            VALID="false"
          else
            echo "✅ Region: $REGION"
          fi
          
          # Validate domain format
          if [ "$PRIMARY_DOMAIN" != "example.com" ] && [ "$PRIMARY_DOMAIN" != "null" ] && [ -n "$PRIMARY_DOMAIN" ]; then
            if ! echo "$PRIMARY_DOMAIN" | grep -E '^[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*$' > /dev/null; then
              ERRORS="${ERRORS}\n❌ domain.primary '$PRIMARY_DOMAIN' is not a valid domain format"
              VALID="false"
            else
              echo "✅ Domain format is valid"
            fi
          fi
          
          # Validate node configuration
          MIN_NODES=$(yq eval '.cluster.min_nodes' config.yaml)
          MAX_NODES=$(yq eval '.cluster.max_nodes' config.yaml)
          NODE_COUNT=$(yq eval '.cluster.node_count' config.yaml)
          
          if [ "$MIN_NODES" -gt "$MAX_NODES" ]; then
            ERRORS="${ERRORS}\n❌ cluster.min_nodes ($MIN_NODES) cannot be greater than cluster.max_nodes ($MAX_NODES)"
            VALID="false"
          fi
          
          if [ "$NODE_COUNT" -lt "$MIN_NODES" ] || [ "$NODE_COUNT" -gt "$MAX_NODES" ]; then
            ERRORS="${ERRORS}\n❌ cluster.node_count ($NODE_COUNT) must be between min_nodes ($MIN_NODES) and max_nodes ($MAX_NODES)"
            VALID="false"
          fi
          
          if [ "$MIN_NODES" -lt 1 ]; then
            ERRORS="${ERRORS}\n❌ cluster.min_nodes must be at least 1"
            VALID="false"
          fi
          
          echo "✅ Node configuration is valid"
        fi
        
        # Check required GitHub secrets
        echo "Checking required GitHub secrets..."
        
        if [ -z "${{ inputs.digitalocean-token }}" ]; then
          ERRORS="${ERRORS}\n❌ DIGITALOCEAN_TOKEN secret is not set. Please add it in repository settings."
          VALID="false"
        else
          echo "✅ DIGITALOCEAN_TOKEN secret is set"
        fi
        
        if [ -z "${{ inputs.github-token }}" ]; then
          ERRORS="${ERRORS}\n❌ GITHUB_TOKEN is not available. Check repository workflow permissions in Settings → Actions → General."
          VALID="false"
        else
          echo "✅ GITHUB_TOKEN is available"
        fi
        
        # SOPS_AGE_PRIVATE_KEY is optional as it can be auto-generated
        if [ -z "${{ inputs.sops-age-private-key }}" ]; then
          echo "ℹ️ SOPS_AGE_PRIVATE_KEY not set - will be auto-generated"
        else
          echo "✅ SOPS_AGE_PRIVATE_KEY secret is set"
        fi
        
        # Output results
        echo "valid=$VALID" >> $GITHUB_OUTPUT
        if [ "$VALID" = "false" ]; then
          echo "errors<<EOF" >> $GITHUB_OUTPUT
          echo -e "$ERRORS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "❌ Configuration validation failed:"
          echo -e "$ERRORS"
          exit 1
        else
          echo "✅ All configuration validation checks passed!"
        fi