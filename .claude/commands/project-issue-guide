#!/bin/bash
# Command: project:issue:guide
# Description: Get guidance for managing project issues based on their current workflow state
# Usage: /project:issue:guide <issue_number>

# Check if gh CLI is installed
if ! command -v gh &> /dev/null; then
    echo "Error: GitHub CLI (gh) is not installed. Please install it first."
    exit 1
fi

# Check if issue number is provided
if [ -z "$1" ]; then
    echo "Error: Please provide an issue number"
    echo "Usage: /project:issue <issue_number>"
    exit 1
fi

ISSUE_NUMBER=$1

# Get issue details including labels
echo "Fetching issue #$ISSUE_NUMBER..."
ISSUE_DATA=$(gh issue view $ISSUE_NUMBER --json title,state,labels,body,url 2>/dev/null)

if [ $? -ne 0 ]; then
    echo "Error: Could not fetch issue #$ISSUE_NUMBER"
    exit 1
fi

# Extract current status label
CURRENT_STATUS=$(echo "$ISSUE_DATA" | jq -r '.labels[] | select(.name | startswith("status:")) | .name' | head -1)

if [ -z "$CURRENT_STATUS" ]; then
    echo "Issue #$ISSUE_NUMBER has no status label. Assuming it's a new issue."
    CURRENT_STATUS="status:new-issue"
fi

echo "Current status: $CURRENT_STATUS"
echo ""

# Handle issue based on current status
case "$CURRENT_STATUS" in
    "status:new-issue")
        echo "=== NEW ISSUE TRIAGE ==="
        echo ""
        echo "Issue Title: $(echo "$ISSUE_DATA" | jq -r '.title')"
        echo ""
        echo "1. Checking for duplicates..."
        # Search for similar issues
        SIMILAR_ISSUES=$(gh issue list --search "$(echo "$ISSUE_DATA" | jq -r '.title' | cut -d' ' -f1-3)" --state all --limit 5 --json number,title,state)
        
        if [ "$(echo "$SIMILAR_ISSUES" | jq '. | length')" -gt 1 ]; then
            echo "Potential duplicates found:"
            echo "$SIMILAR_ISSUES" | jq -r '.[] | "  #\(.number): \(.title) [\(.state)]"'
            echo ""
            echo "Action required: Review these issues and close if duplicate"
        else
            echo "No obvious duplicates found."
        fi
        
        echo ""
        echo "2. Checking issue clarity..."
        BODY_LENGTH=$(echo "$ISSUE_DATA" | jq -r '.body | length')
        if [ "$BODY_LENGTH" -lt 50 ]; then
            echo "Issue description is very short. Consider requesting more information."
        else
            echo "Issue has adequate description."
        fi
        
        echo ""
        echo "Next actions:"
        echo "- If duplicate: gh issue close $ISSUE_NUMBER -c 'Duplicate of #XXX'"
        echo "- If unclear: gh issue comment $ISSUE_NUMBER -b 'Could you please provide more details about...'"
        echo "- If valid and actionable: gh issue edit $ISSUE_NUMBER --add-label 'status:backlog' --remove-label 'status:new-issue'"
        echo "- If valid but not priority: gh issue edit $ISSUE_NUMBER --add-label 'status:icebox' --remove-label 'status:new-issue'"
        ;;
        
    "status:icebox")
        echo "=== ICEBOX REVIEW ==="
        echo ""
        echo "Issue Title: $(echo "$ISSUE_DATA" | jq -r '.title')"
        echo ""
        echo "Reviewing relevance and priority..."
        echo ""
        echo "Next actions:"
        echo "- If no longer relevant: gh issue close $ISSUE_NUMBER -c 'Closing as no longer relevant'"
        echo "- If ready to prioritize: gh issue edit $ISSUE_NUMBER --add-label 'status:backlog' --remove-label 'status:icebox'"
        echo "- If staying in icebox: gh issue comment $ISSUE_NUMBER -b 'Reviewed: Still valid but not immediate priority'"
        ;;
        
    "status:backlog")
        echo "=== BACKLOG REFINEMENT ==="
        echo ""
        echo "Issue Title: $(echo "$ISSUE_DATA" | jq -r '.title')"
        echo ""
        echo "Checking Definition of Ready:"
        echo "- [ ] Clear acceptance criteria"
        echo "- [ ] Estimated effort"
        echo "- [ ] No blocking dependencies"
        echo "- [ ] Technical approach defined"
        echo ""
        echo "Next actions:"
        echo "- If needs refinement: gh issue comment $ISSUE_NUMBER -b 'Needs: [acceptance criteria/estimation/etc]'"
        echo "- If ready for development: gh issue edit $ISSUE_NUMBER --add-label 'status:to-do' --remove-label 'status:backlog'"
        ;;
        
    "status:to-do")
        echo "=== READY FOR DEVELOPMENT ==="
        echo ""
        echo "Issue Title: $(echo "$ISSUE_DATA" | jq -r '.title')"
        echo ""
        echo "To start work on this issue:"
        echo "1. gh issue edit $ISSUE_NUMBER --add-assignee @me"
        echo "2. gh issue edit $ISSUE_NUMBER --add-label 'status:in-progress' --remove-label 'status:to-do'"
        echo "3. git checkout -b issue-$ISSUE_NUMBER"
        ;;
        
    "status:in-progress")
        echo "=== IN PROGRESS ==="
        echo ""
        echo "Issue Title: $(echo "$ISSUE_DATA" | jq -r '.title')"
        echo ""
        echo "Development checklist:"
        echo "- [ ] Code implementation complete"
        echo "- [ ] Unit tests written"
        echo "- [ ] Integration tests written"
        echo "- [ ] Local tests passing"
        echo ""
        echo "When ready for review:"
        echo "1. git add . && git commit -m 'feat: implement #$ISSUE_NUMBER'"
        echo "2. git push origin issue-$ISSUE_NUMBER"
        echo "3. gh pr create --title 'Implement #$ISSUE_NUMBER' --body 'Closes #$ISSUE_NUMBER' --assignee @me"
        echo "4. gh issue edit $ISSUE_NUMBER --add-label 'status:code-review' --remove-label 'status:in-progress'"
        ;;
        
    "status:code-review")
        echo "=== CODE REVIEW ==="
        echo ""
        echo "Issue Title: $(echo "$ISSUE_DATA" | jq -r '.title')"
        echo ""
        # Try to find associated PR
        PR_NUMBER=$(gh pr list --search "$ISSUE_NUMBER" --json number --jq '.[0].number')
        if [ -n "$PR_NUMBER" ]; then
            echo "Associated PR: #$PR_NUMBER"
            echo ""
            echo "Review status:"
            gh pr status
        else
            echo "No associated PR found. Create one with:"
            echo "gh pr create --title 'Implement #$ISSUE_NUMBER' --body 'Closes #$ISSUE_NUMBER'"
        fi
        echo ""
        echo "Actions:"
        echo "- If changes requested: gh issue edit $ISSUE_NUMBER --add-label 'status:in-progress' --remove-label 'status:code-review'"
        echo "- After approval and merge: Issue will auto-move to testing"
        ;;
        
    "status:testing")
        echo "=== TESTING / QA ==="
        echo ""
        echo "Issue Title: $(echo "$ISSUE_DATA" | jq -r '.title')"
        echo ""
        echo "CI/CD Status:"
        echo "Check the latest workflow runs:"
        echo "gh run list --limit 5"
        echo ""
        echo "If tests pass:"
        echo "- gh issue edit $ISSUE_NUMBER --add-label 'status:ready-for-deployment' --remove-label 'status:testing'"
        echo ""
        echo "If tests fail:"
        echo "- Create bug issue: gh issue create --title 'Fix: Test failure for #$ISSUE_NUMBER' --label 'type:bug'"
        echo "- Move back: gh issue edit $ISSUE_NUMBER --add-label 'status:in-progress' --remove-label 'status:testing'"
        ;;
        
    "status:ready-for-deployment")
        echo "=== READY FOR DEPLOYMENT ==="
        echo ""
        echo "Issue Title: $(echo "$ISSUE_DATA" | jq -r '.title')"
        echo ""
        echo "Deployment checklist:"
        echo "- [ ] All tests passing"
        echo "- [ ] Code reviewed and approved"
        echo "- [ ] No blocking issues"
        echo ""
        echo "Deploy with appropriate method for your project"
        echo "After deployment:"
        echo "- gh issue edit $ISSUE_NUMBER --add-label 'status:deployed' --remove-label 'status:ready-for-deployment'"
        ;;
        
    "status:deployed")
        echo "=== DEPLOYED ==="
        echo ""
        echo "Issue Title: $(echo "$ISSUE_DATA" | jq -r '.title')"
        echo ""
        echo "Post-deployment monitoring:"
        echo "- Check application logs"
        echo "- Monitor error rates"
        echo "- Verify feature functionality"
        echo ""
        echo "If issues found:"
        echo "- gh issue create --title 'Bug: Issue with deployed feature #$ISSUE_NUMBER' --label 'type:bug' --body 'Related to #$ISSUE_NUMBER'"
        echo ""
        echo "Otherwise, this issue is complete! ðŸŽ‰"
        ;;
        
    *)
        echo "Unknown status: $CURRENT_STATUS"
        echo "Valid statuses: new-issue, icebox, backlog, to-do, in-progress, code-review, testing, ready-for-deployment, deployed"
        ;;
esac

echo ""
echo "URL: $(echo "$ISSUE_DATA" | jq -r '.url')"