# Kong Helm repository
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: kong
  namespace: kong
spec:
  interval: 30m
  url: https://charts.konghq.com
---
# Kong Gateway Helm release
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kong-gateway
  namespace: kong
spec:
  interval: 30m
  chart:
    spec:
      chart: kong
      version: "2.38.0"
      sourceRef:
        kind: HelmRepository
        name: kong
        namespace: kong
  values:
    # Deployment configuration
    deployment:
      kong:
        enabled: true
      
    # Gateway configuration 
    gateway:
      enabled: true
      type: LoadBalancer
      annotations:
        service.beta.kubernetes.io/do-loadbalancer-name: "happyvertical-production-kong-gateway"
        service.beta.kubernetes.io/do-loadbalancer-protocol: "http"
        service.beta.kubernetes.io/do-loadbalancer-algorithm: "round_robin"
        service.beta.kubernetes.io/do-loadbalancer-size-slug: "lb-small"
        service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
        external-dns.alpha.kubernetes.io/hostname: "api.happyvertical.com"
    
    # Admin API configuration
    admin:
      enabled: true
      type: ClusterIP
      http:
        enabled: true
        servicePort: 8001
        containerPort: 8001
      tls:
        enabled: false
    
    # Manager UI configuration
    manager:
      enabled: true
      type: ClusterIP
      http:
        enabled: true
        servicePort: 8002
        containerPort: 8002
      tls:
        enabled: false
    
    # Ingress controller
    ingressController:
      enabled: true
      installCRDs: true
      
      # Gateway API support
      gatewayDiscovery:
        enabled: true
        
      # Environment variables for DB-less mode
      env:
        kong_admin_listen: "0.0.0.0:8001"
        kong_admin_gui_listen: "0.0.0.0:8002"
        kong_database: "off"
        kong_declarative_config: "/kong/declarative/kong.yml"
        kong_plugins: "bundled,oidc,prometheus,opentelemetry,ai-proxy,rate-limiting-advanced"
        
    # PostgreSQL configuration (disabled for DB-less mode)
    postgresql:
      enabled: false
      
    # Resources
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 2000m
        memory: 2Gi
        
    # Auto-scaling
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 5
      targetCPUUtilizationPercentage: 80
      
    # Health checks
    readinessProbe:
      httpGet:
        path: "/status"
        port: 8100
        scheme: HTTP
      initialDelaySeconds: 5
      timeoutSeconds: 5
      periodSeconds: 10
      
    livenessProbe:
      httpGet:
        path: "/status"
        port: 8100
        scheme: HTTP
      initialDelaySeconds: 5
      timeoutSeconds: 5
      periodSeconds: 10
      failureThreshold: 3
      
    # Security context
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      
    # Service account
    serviceAccount:
      create: true
      
    # Proxy configuration
    proxy:
      enabled: true
      type: LoadBalancer
      annotations:
        service.beta.kubernetes.io/do-loadbalancer-name: "happyvertical-production-kong-proxy"
        service.beta.kubernetes.io/do-loadbalancer-protocol: "http"
        service.beta.kubernetes.io/do-loadbalancer-algorithm: "round_robin"
        service.beta.kubernetes.io/do-loadbalancer-size-slug: "lb-small"
        external-dns.alpha.kubernetes.io/hostname: "*.happyvertical.com"
      http:
        enabled: true
        servicePort: 80
        containerPort: 8000
      tls:
        enabled: true
        servicePort: 443
        containerPort: 8443