# Keycloak Operator for identity management

---
# Keycloak namespace
apiVersion: v1
kind: Namespace
metadata:
  name: keycloak
  labels:
    name: keycloak
---
# Keycloak Operator namespace
apiVersion: v1
kind: Namespace
metadata:
  name: keycloak-operator
  labels:
    name: keycloak-operator
---
# Keycloak Operator
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak-operator
  namespace: keycloak-operator
  labels:
    app.kubernetes.io/name: keycloak-operator
    app.kubernetes.io/instance: keycloak-operator
    app.kubernetes.io/part-of: keycloak
    app.kubernetes.io/component: operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: keycloak-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: keycloak-operator
    spec:
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: keycloak-operator
        image: quay.io/keycloak/keycloak-operator:22.0.5
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: WATCH_NAMESPACE
          value: ""
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: OPERATOR_NAME
          value: "keycloak-operator"
        - name: RELATED_IMAGE_KEYCLOAK
          value: "quay.io/keycloak/keycloak:22.0.5"
        resources:
          requests:
            cpu: 10m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
      serviceAccountName: keycloak-operator
      terminationGracePeriodSeconds: 10
---
# Service account for Keycloak operator
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keycloak-operator
  namespace: keycloak-operator
---
# RBAC for Keycloak operator
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: keycloak-operator
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  - services
  - serviceaccounts
  - persistentvolumeclaims
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  - deployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - k8s.keycloak.org
  resources:
  - keycloaks
  - keycloaks/status
  - keycloaks/finalizers
  - keycloakrealmimports
  - keycloakrealmimports/status
  - keycloakrealmimports/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: keycloak-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: keycloak-operator
subjects:
- kind: ServiceAccount
  name: keycloak-operator
  namespace: keycloak-operator
---
# Keycloak PostgreSQL cluster
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: keycloak-postgres
  namespace: keycloak
spec:
  instances: 3
  
  postgresql:
    parameters:
      max_connections: "200"
      shared_buffers: "256MB"
      effective_cache_size: "1GB"
      work_mem: "4MB"
      maintenance_work_mem: "64MB"
      random_page_cost: "1.1"
      effective_io_concurrency: "200"
      checkpoint_completion_target: "0.9"
      wal_buffers: "16MB"
      default_statistics_target: "100"
  
  bootstrap:
    initdb:
      database: keycloak
      owner: keycloak
      secret:
        name: keycloak-postgres-credentials
  
  storage:
    size: 10Gi
    storageClass: do-block-storage
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "1Gi"
      cpu: "1000m"
  
  monitoring:
    enabled: true
---
# PostgreSQL credentials for Keycloak
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: keycloak-postgres-credentials
  namespace: keycloak
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: digitalocean-secret-store
    kind: ClusterSecretStore
  target:
    name: keycloak-postgres-credentials
    creationPolicy: Owner
  data:
  - secretKey: username
    remoteRef:
      key: postgres-username
  - secretKey: password
    remoteRef:
      key: postgres-admin-password
---
# Keycloak instance
apiVersion: k8s.keycloak.org/v2alpha1
kind: Keycloak
metadata:
  name: keycloak
  namespace: keycloak
  labels:
    app: keycloak
spec:
  instances: 2
  
  image: quay.io/keycloak/keycloak:22.0.5
  
  hostname:
    hostname: auth.example.com
  
  http:
    tlsSecret: keycloak-tls
  
  db:
    vendor: postgres
    host: keycloak-postgres-rw.keycloak.svc.cluster.local
    port: 5432
    database: keycloak
    usernameSecret:
      name: keycloak-postgres-credentials
      key: username
    passwordSecret:
      name: keycloak-postgres-credentials
      key: password
  
  proxy:
    headers: xforwarded
  
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 2000m
      memory: 2Gi
  
  additionalOptions:
  - name: "health-enabled"
    value: "true"
  - name: "metrics-enabled"
    value: "true"
  - name: "http-enabled"
    value: "true"
  - name: "hostname-strict"
    value: "false"
  - name: "hostname-strict-https"
    value: "false"
---
# Keycloak admin credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: keycloak-admin-credentials
  namespace: keycloak
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: digitalocean-secret-store
    kind: ClusterSecretStore
  target:
    name: keycloak-admin-credentials
    creationPolicy: Owner
  data:
  - secretKey: username
    remoteRef:
      key: keycloak-admin-username
  - secretKey: password
    remoteRef:
      key: credentials
      property: keycloak-admin-password
---
# Admin user credentials for Keycloak realm import
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: keycloak-realm-admin-credentials
  namespace: keycloak
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: cluster-secret-store
    kind: ClusterSecretStore
  target:
    name: keycloak-realm-admin-credentials
    creationPolicy: Owner
  data:
  - secretKey: password
    remoteRef:
      key: credentials
      property: admin-password
  - secretKey: username
    remoteRef:
      key: credentials
      property: admin-username
  - secretKey: fullname
    remoteRef:
      key: credentials
      property: admin-full-name
---
# TLS certificate for Keycloak
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: keycloak-tls
  namespace: keycloak
spec:
  secretName: keycloak-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - auth.example.com
---
# Kong HTTPRoute for Keycloak
apiVersion: gateway.networking.k8s.io/v1beta1
kind: HTTPRoute
metadata:
  name: keycloak
  namespace: keycloak
spec:
  parentRefs:
  - name: kong-gateway
    namespace: kong-system
  hostnames:
  - auth.example.com
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /
    backendRefs:
    - name: keycloak-service
      port: 8080
