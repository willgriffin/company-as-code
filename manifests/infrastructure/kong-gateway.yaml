---
# Kong system namespace
apiVersion: v1
kind: Namespace
metadata:
  name: kong-system
  labels:
    name: kong-system
---
# Kong Helm repository
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: kong
  namespace: kong-system
spec:
  interval: 30m
  url: https://charts.konghq.com
---
# Kong Gateway Helm release
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kong-gateway
  namespace: kong-system
spec:
  interval: 30m
  chart:
    spec:
      chart: kong
      version: "2.38.0"
      sourceRef:
        kind: HelmRepository
        name: kong
        namespace: kong-system
  values:
    # Deployment configuration
    deployment:
      kong:
        enabled: true
      
    # Gateway configuration 
    gateway:
      enabled: true
      type: LoadBalancer
      annotations:
        service.beta.kubernetes.io/do-loadbalancer-name: "example-cluster-kong-gateway"
        service.beta.kubernetes.io/do-loadbalancer-protocol: "http"
        service.beta.kubernetes.io/do-loadbalancer-algorithm: "round_robin"
        service.beta.kubernetes.io/do-loadbalancer-size-slug: "lb-small"
        service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
        external-dns.alpha.kubernetes.io/hostname: "api.example.com"
    
    # Admin API configuration
    admin:
      enabled: true
      type: ClusterIP
      http:
        enabled: true
        servicePort: 8001
        containerPort: 8001
      tls:
        enabled: false
    
    # Manager UI configuration
    manager:
      enabled: true
      type: ClusterIP
      http:
        enabled: true
        servicePort: 8002
        containerPort: 8002
      tls:
        enabled: false
    
    # Ingress controller
    ingressController:
      enabled: true
      installCRDs: true
      
      # Gateway API support
      gatewayDiscovery:
        enabled: true
        
      # Environment variables for DB-less mode
      env:
        kong_admin_listen: "0.0.0.0:8001"
        kong_admin_gui_listen: "0.0.0.0:8002"
        kong_database: "off"
        kong_declarative_config: "/kong/declarative/kong.yml"
        kong_plugins: "bundled,oidc,prometheus,opentelemetry,ai-proxy,rate-limiting-advanced"
        
    # PostgreSQL configuration (disabled for DB-less mode)
    postgresql:
      enabled: false
      
    # Resources
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 2000m
        memory: 2Gi
        
    # Auto-scaling
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 5
      targetCPUUtilizationPercentage: 80
      
    # Health checks
    readinessProbe:
      httpGet:
        path: "/status"
        port: 8100
        scheme: HTTP
      initialDelaySeconds: 5
      timeoutSeconds: 5
      periodSeconds: 10
      
    livenessProbe:
      httpGet:
        path: "/status"
        port: 8100
        scheme: HTTP
      initialDelaySeconds: 5
      timeoutSeconds: 5
      periodSeconds: 10
      failureThreshold: 3
      
    # Security context
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      
    # Service account
    serviceAccount:
      create: true
      
    # Proxy configuration
    proxy:
      enabled: true
      type: LoadBalancer
      annotations:
        service.beta.kubernetes.io/do-loadbalancer-name: "example-cluster-kong-proxy"
        service.beta.kubernetes.io/do-loadbalancer-protocol: "http"
        service.beta.kubernetes.io/do-loadbalancer-algorithm: "round_robin"
        service.beta.kubernetes.io/do-loadbalancer-size-slug: "lb-small"
        external-dns.alpha.kubernetes.io/hostname: "*.example.com"
      http:
        enabled: true
        servicePort: 80
        containerPort: 8000
      tls:
        enabled: true
        servicePort: 443
        containerPort: 8443
---
# Redis for Kong session storage
apiVersion: redis.redis.opstreelabs.in/v1beta2
kind: Redis
metadata:
  name: kong-redis
  namespace: kong-system
spec:
  kubernetesConfig:
    image: redis:7-alpine
    imagePullPolicy: IfNotPresent
  storage:
    volumeClaimTemplate:
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
  redisConfig:
    maxmemory: 512mb
    maxmemory-policy: allkeys-lru
---
# Kong Gateway configuration
apiVersion: gateway.networking.k8s.io/v1beta1
kind: Gateway
metadata:
  name: kong-gateway
  namespace: kong-system
spec:
  gatewayClassName: kong
  listeners:
  - name: proxy
    port: 80
    protocol: HTTP
  - name: proxy-ssl
    port: 443
    protocol: HTTPS
    tls:
      mode: Terminate
      certificateRefs:
      - kind: Secret
        name: wildcard-tls
---
# Kong secrets managed by External Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kong-secrets
  namespace: kong-system
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: cluster-secret-store
    kind: ClusterSecretStore
  target:
    name: kong-secrets
    creationPolicy: Owner
  data:
  - secretKey: oidc-client-secret
    remoteRef:
      key: credentials
      property: kong-oidc-client-secret
---
# Kong plugins configuration
apiVersion: configuration.konghq.com/v1
kind: KongPlugin
metadata:
  name: keycloak-oidc
  namespace: kong-system
spec:
  plugin: oidc
  config:
    client_id: kong-gateway
    client_secret:
      valueFrom:
        secretKeyRef:
          name: kong-secrets
          key: oidc-client-secret
    discovery: "https://auth.example.com/realms/mycompany/.well-known/openid_configuration"
    redirect_uri_scheme: https
    session_storage: redis
    session_redis_host: rfs-kong-redis.kong-system.svc.cluster.local
    session_redis_port: 6379
    logout_path: /logout
    revoke_tokens_on_logout: true
---
# Prometheus metrics plugin
apiVersion: configuration.konghq.com/v1
kind: KongPlugin
metadata:
  name: prometheus-metrics
  namespace: kong-system
spec:
  plugin: prometheus
  config:
    per_consumer: true
    status_code_metrics: true
    latency_metrics: true
    bandwidth_metrics: true
---
# Rate limiting plugin
apiVersion: configuration.konghq.com/v1
kind: KongPlugin
metadata:
  name: basic-rate-limit
  namespace: kong-system
spec:
  plugin: rate-limiting-advanced
  config:
    limit: [100]
    window_size: [60]
    sync_rate: 5
    strategy: redis
    redis:
      host: rfs-kong-redis.kong-system.svc.cluster.local
      port: 6379
---
# Request size limiting plugin
apiVersion: configuration.konghq.com/v1
kind: KongPlugin
metadata:
  name: request-size-limit
  namespace: kong-system
spec:
  plugin: request-size-limiting
  config:
    allowed_payload_size: 128
---
# Expense tracking plugin (custom)
apiVersion: configuration.konghq.com/v1
kind: KongPlugin
metadata:
  name: expense-tracker
  namespace: kong-system
spec:
  plugin: http-log
  config:
    http_endpoint: "http://expense-tracker.kong-system.svc.cluster.local:8080/kong-webhook"
    method: POST
    content_type: application/json
    flush_timeout: 2
    keepalive: 60000