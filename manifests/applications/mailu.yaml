# Mailu email server suite

---
# Mailu namespace
apiVersion: v1
kind: Namespace
metadata:
  name: mailu
  labels:
    name: mailu
---
# Mailu Helm repository
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: mailu
  namespace: mailu
spec:
  interval: 30m
  url: https://mailu.github.io/helm-charts/
---
# PostgreSQL cluster for Mailu
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: mailu-postgres
  namespace: mailu
spec:
  instances: 3
  
  postgresql:
    parameters:
      max_connections: "100"
      shared_buffers: "128MB"
      effective_cache_size: "512MB"
  
  bootstrap:
    initdb:
      database: mailu
      owner: mailu
      secret:
        name: mailu-postgres-credentials
  
  storage:
    size: 10Gi
    storageClass: do-block-storage
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  monitoring:
    enabled: true
---
# Redis for Mailu
apiVersion: redis.redis.opstreelabs.in/v1beta2
kind: Redis
metadata:
  name: mailu-redis
  namespace: mailu
spec:
  kubernetesConfig:
    image: redis:7-alpine
    imagePullPolicy: IfNotPresent
  storage:
    volumeClaimTemplate:
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: do-block-storage
        resources:
          requests:
            storage: 2Gi
  redisConfig:
    maxmemory: 512mb
    maxmemory-policy: allkeys-lru
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
---
# Mailu Helm release
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: mailu
  namespace: mailu
spec:
  interval: 30m
  chart:
    spec:
      chart: mailu
      version: "1.5.0"
      sourceRef:
        kind: HelmRepository
        name: mailu
        namespace: mailu
  values:
    # Domain configuration
    domain: "happyvertical.com"
    hostnames:
      - mail.happyvertical.com
    
    # Mail configuration
    mailuVersion: "2023.11"
    subnet: "10.0.0.0/8"
    
    # Database configuration
    database:
      type: postgresql
      postgresql:
        enabled: false  # Using external PostgreSQL
        host: mailu-postgres-rw.mailu.svc.cluster.local
        port: 5432
        database: mailu
        username: mailu
        passwordSecret: mailu-postgres-credentials
        passwordSecretKey: password
    
    # Redis configuration
    redis:
      enabled: false  # Using external Redis
      host: rfs-mailu-redis.mailu.svc.cluster.local
      port: 6379
    
    # Security and secrets
    secretKey:
      existingSecret: mailu-secrets
      existingSecretKey: secret-key
    
    # Initial admin configuration
    initialAccount:
      enabled: true
      username: admin
      domain: "happyvertical.com"
      existingSecret: mailu-secrets
      existingSecretPasswordKey: admin-password
    
    # Ingress (disabled - using Kong)
    ingress:
      enabled: false
    
    # Components configuration
    front:
      # Front component handles HTTP/HTTPS/SMTP/IMAP/POP3
      replicas: 2
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
        limits:
          cpu: 500m
          memory: 512Mi
      persistence:
        size: 1Gi
        storageClass: do-block-storage
        accessMode: ReadWriteMany
      
      # Service configuration
      service:
        type: LoadBalancer
        annotations:
          service.beta.kubernetes.io/do-loadbalancer-name: "happyvertical-production-mailu"
          service.beta.kubernetes.io/do-loadbalancer-protocol: "tcp"
          service.beta.kubernetes.io/do-loadbalancer-algorithm: "round_robin"
          service.beta.kubernetes.io/do-loadbalancer-size-slug: "lb-small"
          external-dns.alpha.kubernetes.io/hostname: "mail.happyvertical.com"
        ports:
          pop3: false  # Disable POP3
          pop3s: false
          imap: true
          imaps: true
          smtp: true
          smtps: true
          submission: true
    
    # Admin interface
    admin:
      enabled: true
      replicas: 1
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
        limits:
          cpu: 500m
          memory: 512Mi
      persistence:
        size: 2Gi
        storageClass: do-block-storage
        accessMode: ReadWriteOnce
    
    # Postfix SMTP server
    postfix:
      enabled: true
      replicas: 2
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
        limits:
          cpu: 500m
          memory: 512Mi
      persistence:
        size: 2Gi
        storageClass: do-block-storage
        accessMode: ReadWriteOnce
      
      # Postfix configuration
      messageSizeLimitMb: 50
      rejectUnlistedRecipient: true
      
      # Outbound relay configuration (AWS SES)
      outboundRelay:
        enabled: true
        host: email-smtp.us-east-1.amazonaws.com
        port: 587
        authEnabled: true
        username:
          secretName: mailu-secrets
          secretKey: smtp-username
        password:
          secretName: mailu-secrets
          secretKey: smtp-password
    
    # Dovecot IMAP server
    dovecot:
      enabled: true
      replicas: 2
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
        limits:
          cpu: 500m
          memory: 512Mi
      persistence:
        size: 10Gi
        storageClass: do-block-storage
        accessMode: ReadWriteMany
    
    # Rspamd spam filter
    rspamd:
      enabled: true
      replicas: 2
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
        limits:
          cpu: 500m
          memory: 512Mi
      persistence:
        size: 1Gi
        storageClass: do-block-storage
        accessMode: ReadWriteOnce
    
    # ClamAV antivirus
    clamav:
      enabled: true
      replicas: 1
      resources:
        requests:
          cpu: 500m
          memory: 1Gi
        limits:
          cpu: 1000m
          memory: 2Gi
      persistence:
        size: 2Gi
        storageClass: do-block-storage
        accessMode: ReadWriteOnce
    
    # Webmail (Roundcube)
    webmail:
      enabled: true
      type: roundcube
      replicas: 2
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
        limits:
          cpu: 500m
          memory: 512Mi
      persistence:
        size: 1Gi
        storageClass: do-block-storage
        accessMode: ReadWriteOnce
    
    # Webdav support
    webdav:
      enabled: true
      replicas: 1
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 500m
          memory: 256Mi
    
    # Fetchmail
    fetchmail:
      enabled: false
    
    # Persistence for mail data
    persistence:
      enabled: true
      storageClass: do-block-storage
      accessMode: ReadWriteMany
      size: 100Gi
      claimNameOverride: mailu-storage
    
    # Global resource settings
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi
    
    # Security contexts
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      capabilities:
        add:
          - NET_BIND_SERVICE
          - DAC_OVERRIDE
          - SETUID
          - SETGID
        drop:
          - ALL
    
    # Pod security context
    podSecurityContext:
      runAsNonRoot: false  # Mailu requires root for some components
      seccompProfile:
        type: RuntimeDefault
---
# External secrets for Mailu
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mailu-secrets
  namespace: mailu
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: digitalocean-secret-store
    kind: ClusterSecretStore
  target:
    name: mailu-secrets
    creationPolicy: Owner
  data:
  - secretKey: secret-key
    remoteRef:
      key: mailu-secret-key
  - secretKey: admin-password
    remoteRef:
      key: mailu-admin-password
  - secretKey: smtp-username
    remoteRef:
      key: aws-ses-smtp-username
  - secretKey: smtp-password
    remoteRef:
      key: aws-ses-smtp-password
---
# PostgreSQL credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mailu-postgres-credentials
  namespace: mailu
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: digitalocean-secret-store
    kind: ClusterSecretStore
  target:
    name: mailu-postgres-credentials
    creationPolicy: Owner
  data:
  - secretKey: username
    remoteRef:
      key: postgres-username
  - secretKey: password
    remoteRef:
      key: postgres-admin-password
---
# OAuth2 Proxy for webmail access
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mailu-oauth2-proxy
  namespace: mailu
  labels:
    app: mailu-oauth2-proxy
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mailu-oauth2-proxy
  template:
    metadata:
      labels:
        app: mailu-oauth2-proxy
    spec:
      containers:
      - name: oauth2-proxy
        image: quay.io/oauth2-proxy/oauth2-proxy:v7.5.1
        ports:
        - containerPort: 4180
          name: http
        env:
        - name: OAUTH2_PROXY_PROVIDER
          value: "oidc"
        - name: OAUTH2_PROXY_OIDC_ISSUER_URL
          value: "https://auth.happyvertical.com/realms/mycompany"
        - name: OAUTH2_PROXY_CLIENT_ID
          value: "mailu"
        - name: OAUTH2_PROXY_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: mailu-oauth2-proxy-secret
              key: client-secret
        - name: OAUTH2_PROXY_COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name: mailu-oauth2-proxy-secret
              key: cookie-secret
        - name: OAUTH2_PROXY_EMAIL_DOMAINS
          value: "*"
        - name: OAUTH2_PROXY_UPSTREAM
          value: "http://mailu-webmail.mailu.svc.cluster.local"
        - name: OAUTH2_PROXY_HTTP_ADDRESS
          value: "0.0.0.0:4180"
        - name: OAUTH2_PROXY_REDIRECT_URL
          value: "https://webmail.happyvertical.com/oauth2/callback"
        - name: OAUTH2_PROXY_COOKIE_DOMAINS
          value: ".happyvertical.com"
        - name: OAUTH2_PROXY_WHITELIST_DOMAINS
          value: ".happyvertical.com"
        - name: OAUTH2_PROXY_COOKIE_SECURE
          value: "true"
        - name: OAUTH2_PROXY_COOKIE_HTTPONLY
          value: "true"
        - name: OAUTH2_PROXY_COOKIE_SAMESITE
          value: "lax"
        - name: OAUTH2_PROXY_SET_XAUTHREQUEST
          value: "true"
        - name: OAUTH2_PROXY_PASS_ACCESS_TOKEN
          value: "true"
        - name: OAUTH2_PROXY_PASS_AUTHORIZATION_HEADER
          value: "true"
        - name: OAUTH2_PROXY_SET_AUTHORIZATION_HEADER
          value: "true"
        resources:
          requests:
            cpu: 10m
            memory: 32Mi
          limits:
            cpu: 100m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2000
          seccompProfile:
            type: RuntimeDefault
---
# OAuth2 Proxy service
apiVersion: v1
kind: Service
metadata:
  name: mailu-oauth2-proxy
  namespace: mailu
  labels:
    app: mailu-oauth2-proxy
spec:
  selector:
    app: mailu-oauth2-proxy
  ports:
  - name: http
    port: 80
    targetPort: 4180
    protocol: TCP
  type: ClusterIP
---
# OAuth2 Proxy secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mailu-oauth2-proxy-secret
  namespace: mailu
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: digitalocean-secret-store
    kind: ClusterSecretStore
  target:
    name: mailu-oauth2-proxy-secret
    creationPolicy: Owner
  data:
  - secretKey: client-secret
    remoteRef:
      key: mailu-oidc-secret
  - secretKey: cookie-secret
    remoteRef:
      key: mailu-oauth2-cookie-secret
---
# Kong HTTPRoute for Mailu webmail (via OAuth2 proxy)
apiVersion: gateway.networking.k8s.io/v1beta1
kind: HTTPRoute
metadata:
  name: mailu-webmail
  namespace: mailu
spec:
  parentRefs:
  - name: kong-gateway
    namespace: kong-system
  hostnames:
  - webmail.happyvertical.com
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /
    backendRefs:
    - name: mailu-oauth2-proxy
      port: 80
---
# Kong HTTPRoute for Mailu admin interface
apiVersion: gateway.networking.k8s.io/v1beta1
kind: HTTPRoute
metadata:
  name: mailu-admin
  namespace: mailu
  annotations:
    konghq.com/plugins: keycloak-oidc,prometheus-metrics
spec:
  parentRefs:
  - name: kong-gateway
    namespace: kong-system
  hostnames:
  - mailadmin.happyvertical.com
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /
    backendRefs:
    - name: mailu-admin
      port: 80
---
# TLS certificates for Mailu
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: mailu-tls
  namespace: mailu
spec:
  secretName: mailu-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - mail.happyvertical.com
  - webmail.happyvertical.com
  - mailadmin.happyvertical.com
  - smtp.happyvertical.com
  - imap.happyvertical.com
---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mailu
  namespace: mailu
  labels:
    app.kubernetes.io/name: mailu
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mailu
  endpoints:
  - port: http
    path: /metrics
    interval: 60s
    scrapeTimeout: 30s
---
# PostgreSQL credentials for Mailu
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mailu-postgres-credentials
  namespace: mailu
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: cluster-secret-store
    kind: ClusterSecretStore
  target:
    name: mailu-postgres-credentials
    template:
      type: kubernetes.io/basic-auth
  data:
    - secretKey: username
      remoteRef:
        key: credentials
        property: postgres-admin-username
    - secretKey: password
      remoteRef:
        key: credentials
        property: postgres-admin-password
---
# Application secrets for Mailu
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mailu-secrets
  namespace: mailu
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: cluster-secret-store
    kind: ClusterSecretStore
  target:
    name: mailu-secrets
  data:
    - secretKey: secret-key
      remoteRef:
        key: credentials
        property: mailu-secret-key
    - secretKey: smtp-username
      remoteRef:
        key: credentials
        property: aws-access-key-id
    - secretKey: smtp-password
      remoteRef:
        key: credentials
        property: aws-secret-access-key